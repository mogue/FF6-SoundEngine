; FF6 SPC disassembly revision 1 by m06, 2018
; thx to Everything for SPC RAM map
; thx to Novalia Spirit for initial disassembly
; thx to MathOnNapkins for Chrono Trigger disassembly as reference 

; Engine start
0200: 20        CLRP                (Clear direct page flag)
0201: C0        DI                  (Clear interrupt flag)
0202: CD FF     MOV   X,#$FF        (Set X to #$FF)
0204: BD        MOV   SP,X          (Set stack pointer to $FF)
0205: E8 00     MOV   A,#$00        (Zero A)
0207: 5D        MOV   X,A           (Zero X)
0208: AF        MOV   (X)+,A        (Zero $00+X; increase X)
0209: C8 F0     CMP   X,#$F0        (Pointing to $F0?)
020B: D0 FB     BNE   $0208         (Loop if not)
020D: 1A C6     DECW  $C6           (Paused and Current Song = #$FF)
020F: E8 00     MOV   A,#$00        (Zero A...)
0211: 8D 0C     MOV   Y,#$0C        (Point to MVL)
0213: 3F 48 06  CALL  $0648         (Master volume left: 0)
0216: 8D 1C     MOV   Y,#$1C        (Point to MVR)
0218: 3F 48 06  CALL  $0648         (Master volume right: 0)
021B: 8D 2C     MOV   Y,#$2C        (Point to EVOLL)
021D: 3F 48 06  CALL  $0648         (Echo volume left: 0)
0220: 8D 3C     MOV   Y,#$3C        (Point to EVOLR)
0222: 3F 48 06  CALL  $0648         (Echo volume right: 0)
0225: 8D 2D     MOV   Y,#$2D        (Point to pitch mod)
0227: 3F 48 06  CALL  $0648         (Pitch modulation: all voices off)
022A: 8D 3D     MOV   Y,#$3D        (Point to noise)
022C: 3F 48 06  CALL  $0648         (Noise: all voices off)
022F: 8D 4D     MOV   Y,#$4D        (Point to echo)
0231: 3F 48 06  CALL  $0648         (Echo: all voices off)
0234: 8D 5D     MOV   Y,#$5D        (Point to DIR; sample pointer table)
0236: E8 1B     MOV   A,#$1B        (Address parameter)
0238: 3F 48 06  CALL  $0648         (Source directory: $1B00)
023B: 8D 07     MOV   Y,#$07        (Point to voice0 GAIN)
023D: CD A0     MOV   X,#$A0        (Parameter)
023F: CB F2     MOV   $F2,Y         (Set DSP register)
0241: D8 F3     MOV   $F3,X         (Store parameter)
0243: DD        MOV   A,Y           (Transfer Y to A)
0244: 60        CLRC                (Clear Carry for addition)
0245: 88 10     ADC   A,#$10        (Point to next voice)
0247: FD        MOV   Y,A           (Transfer A to Y)
0248: 10 F5     BPL   $023F         (Loop unless 8 voices done)
024A: 8F 30 F1  MOV   $F1,#$30      (Clear all 4 ports, stop all 3 timers)
024D: 8F 27 FA  MOV   $FA,#$27      (Timer0 target: 39) (4.875ms)
0250: 8F 80 FB  MOV   $FB,#$80      (Timer1 target: 128) (16ms)
0253: 8F 05 FC  MOV   $FC,#$05      (Timer2 target: 5)
0256: 8F 07 F1  MOV   $F1,#$07      (Enable all 3 timers)
0259: 8F 05 8C  MOV   $8C,#$05      (Echo Delay = #$05)
025C: 3F 02 10  CALL  $1002         (Initialize Echo)
025F: E8 3F     MOV   A,#$3F        (Parameter: 127)
0261: 8D 0C     MOV   Y,#$0C        (Point to MVL)
0263: 3F 48 06  CALL  $0648         (Master volume left: 127)
0266: 8D 1C     MOV   Y,#$1C        (Point to MVR)
0268: 3F 48 06  CALL  $0648         (Master volume right: 127)
026B: 8B 24     DEC   $24           (Mute all voices...?)
026D: 8F 07 C8  MOV   $C8,#$07      (Master Evelope Frame Counter = 7)
0270: 8B A8     DEC   $A8           (Decrement SFX Volume Envelope Counter)

0272: 3F E1 09  CALL  $09E1         (Process Ports)
0275: EB FD     MOV   Y,$FD         (Counter-0, 4.875 milliseconds)
0277: F0 F9     BEQ   $0272         (Loop if zero)
0279: 43 85 03  BBS2  $85,$027F     (If ?)
027C: D3 86 04  BBC6  $86,$0283     (If disable echo? skip 2 instructions)
027F: 8D 05     MOV   Y,#$05        (Start from $1999)
0281: 2F 02     BRA   $0285         (Skip next instruction)
0283: 8D 11     MOV   Y,#$11        (Start from $19A5)
0285: F6 94 19  MOV   A,$1994+Y     (Register table)
0288: C4 F2     MOV   $F2,A         (Set DSP register)
028A: F6 A5 19  MOV   A,$19A5+Y     (Register Data table)
028D: 5D        MOV   X,A           (Transfer A to X)
028E: E6        MOV   A,(X)         (Read from DP)
028F: C4 F3     MOV   $F3,A         (Store to register)
0291: FE F2     DBNZ  Y,$0285       (Decrease Y, loop unless zero)
0293: CB 24     MOV   $24,Y         (Clear key-off for all voices...?)
0295: CB 22     MOV   $22,Y         (Clear key-on for all voices...?)
0297: E3 86 14  BBS7  $86,$02AE     (If waveform output mode)
029A: 63 85 03  BBS3  $85,$02A0     (If master envelope output mode)
029D: EB 52     MOV   Y,$52         (Y = Enabled Voices Bitmask)
029F: E5 EB AD  MOV   A,$ADEB       (Pointless, macro trick)
-> 02A0: EB AD  MOV   Y,$AD         (Y = Master Volume Envelope Counter)
02A2: E4 DD     MOV   A,$DD         (A = Enabled Conditional Jump Bitmask)
02A4: DA F6     MOVW  $F6,YA        (Store to Port $2142)
02A6: EB 7B     MOV   Y,$7B         (Y = Output Code)
02A8: E8 00     MOV   A,#$00        (Zero A)
02AA: DA F4     MOVW  $F4,YA        (Store to Port $2140)
02AC: 2F 03     BRA   $02B1         (Skip next instruction)
02AE: 3F DF 10  CALL  $10DF         (Waveform Output Mode)
02B1: BA D9     MOVW  YA,$D9        (Paused Voices, Song and Game SFX)
02B3: D0 4B     BNE   $0300         (Skip
02B5: 8B C8     DEC   $C8           (Decrement Master Envelope Frame Counter)
02B7: D0 06     BNE   $02BF         (Skip 2 instructions if counting)
02B9: 8F 07 C8  MOV   $C8,#$07      (Master Envelope Frame Counter = 7)
02BC: 3F 38 11  CALL  $1138         (Process Master Envelopes)
02BF: 3F 08 03  CALL  $0308         (Process Song Script)
02C2: CD 00     MOV   X,#$00        (Zero X)
02C4: 8F 01 8F  MOV   $8F,#$01      (Current Voice = 1)
02C7: E4 83     MOV   A,$83         (A = Game Sound Effect Voices)
02C9: 04 84     OR    A,$84         (OR System Sound Effect Voices)
02CB: 48 FF     EOR   A,#$FF        (Invert SFX voices)
02CD: 24 52     AND   A,$52         (Filter with Enabled Voices)
02CF: 24 23     AND   A,$23         (Filter with Key-On Voices for paused song)
02D1: C4 A0     MOV   $A0,A         (Set Active Voices)
02D3: 2F 09     BRA   $02DE         (Skip 5 instructions)
02D5: D8 A3     MOV   $A3,X         (Set Voice Pointer)
02D7: 3F 45 07  CALL  $0745         (Process Vibrato and Tremolo)
02DA: 3D        INC   X             (Increment Voice Pointer)
02DB: 3D        INC   X             (Increment Voice Pointer)
02DC: 0B 8F     ASL   $8F           (Next Voice)
02DE: 4B A0     LSR   $A0           (Shift Active Voices)
02E0: B0 F3     BCS   $02D5         (Loop if Next Voice is active)
02E2: D0 F6     BNE   $02DA         (Loop unless All Voices Done)
02E4: CD 1E     MOV   X,#$1E        (X = Voice Pointer for Last Voice)
02E6: 8F 80 8F  MOV   $8F,#$80      (Current Voice = bit 7, Last Voice)
02E9: E4 83     MOV   A,$83         (A = Game Sound Effect Voices)
02EB: 04 84     OR    A,$84         (with System Sound Effect Voices)
02ED: C4 A0     MOV   $A0,A         (Set Active voices)
02EF: 2F 09     BRA   $02FA         (Skip 5 instructions)
02F1: D8 A3     MOV   $A3,X         (Set Voice Pointer)
02F3: 3F 45 07  CALL  $0745         (Process Vibrato and Tremolo)
02F6: 1D        DEC   X             (Increment Voice Pointer)
02F7: 1D        DEC   X             (Increment Voice Pointer)
02F8: 4B 8F     LSR   $8F           (Next Voice)
02FA: 0B A0     ASL   $A0           (Shift Active Voices)
02FC: B0 F3     BCS   $02F1         (Loop if Next Voice is active)
02FE: D0 F6     BNE   $02F6         (Loop unless All Voices Done)
0300: E8 00     MOV   A,#$00        (Zero A, Volume Update)
0302: FD        MOV   Y,A           (Zero Y, Pitch Update)
0303: DA DB     MOVW  $DB,YA        (Disable Volume and Pitch Update in DSP)
0305: 5F 72 02  JMP   $0272         (Loop)

; Process Song Script
0308: A3 86 1F  BBS5  $86,$032A     (If fast forward mode skip 18 instructions)
030B: E4 46     MOV   A,$46         (A = Current Tempo high)
030D: EB B7     MOV   Y,$B7         (Y = Tempo Ratio)
030F: F0 12     BEQ   $0323         (If zero skip 11 instructions)
0311: CF        MUL   YA            (Current Tempo * Tempo Ratio)
0312: DD        MOV   A,Y           (Transfer Y to A)
0313: E3 B7 0A  BBS7  $B7,$0320     (If tempo ratio signed skip 6 instructions)
0316: 1C        ASL   A             (Double calculated tempo)
0317: 60        CLRC                (Clear Carry for addition)
0318: 84 46     ADC   A,$46         (Add Current Tempo low)
031A: 90 07     BCC   $0323         (If carry clear skip 4 instructions)
031C: E8 FF     MOV   A,#$FF        (A = #$FF, tempo boundary)
031E: 2F 03     BRA   $0323         (Skip 2 instructions)
0320: D0 01     BNE   $0323         (Skip 1 instruction)
0322: BC        INC   A             (Increment A)
0323: 60        CLRC                (Clear Carry for addition)
0324: 84 47     ADC   A,$47         (Add Tempo Counter)
0326: C4 47     MOV   $47,A         (Store Tempo Counter)
0328: 90 53     BCC   $037D         (
032A: CD 00     MOV   X,#$00        (Zero X)
032C: 8F 01 8F  MOV   $8F,#$01      (Current Voices bitmask = #$01)
032F: FA 52 A0  MOV   ($A0),($52)   (Set Active Voices with Enabled Voices)
0332: 2F 39     BRA   $036D         (Skip 27 instructions)
0334: D8 A3     MOV   $A3,X         (Set Voice Pointer)
0336: 9B 25     DEC   $25+X         (Decrement Note Duration Counter)
0338: D0 05     BNE   $033F         (If note still counting skip 2 instructions)
033A: 3F D9 03  CALL  $03D9         (Handle Song Script Code)
033D: 2F 27     BRA   $0366         (Skip 18 instructions)
033F: 8D 00     MOV   Y,#$00        (Zero Y)
0341: C8 10     CMP   X,#$10        (X > #$10)
0343: B0 01     BCS   $0346         (If SFX skip next 1/2 instruction)
0345: E8 FC     MOV   A,#$FC        (.. hack for SFX)
-> 0346: FC     INC   Y             (Increment Y, from branch)
0347: E8 02     MOV   A,#$02        (A = #$02)
0349: DE 25 1A  CBNE  $25+X,$0366   (If loop count != 2 skip 12 instructions)
034C: F6 59 00  MOV   A,$0059+Y     (A = Disable Key-Off at End of Note)
034F: 24 8F     AND   A,$8F         (Isolate Current Voice)
0351: D0 13     BNE   $0366         (If active skip 9 instructions)
0353: DD        MOV   A,Y           (Transfer Y to A)
0354: D0 0D     BNE   $0363         (Skip )
0356: E4 8F     MOV   A,$8F         (A = Current Voice)
0358: 4E 23 00  TCLR1 $0023         (Clear Key-On for Paused Song)
035B: E4 83     MOV   A,$83         (A = Game Sound Effect Voices)
035D: 04 84     OR    A,$84         (with System Sound Effect Voices)
035F: 24 8F     AND   A,$8F         (Select Current Voice)
0361: D0 03     BNE   $0366         (Skip next instruction if active)
0363: 09 8F 24  OR    ($24),($8F)   ($24 = muted voices)
0366: 3F 54 06  CALL  $0654         (Process Volume, Pan and Pansweep Envelopes)
0369: 3D        INC   X             (Increment Voice Pointer)
036A: 3D        INC   X             (Increment Voice Pointer)
036B: 0B 8F     ASL   $8F           (bitmask for current voice <<)
036D: 4B A0     LSR   $A0           (Active Voices >>)
036F: B0 C3     BCS   $0334         (Loop while carried voice is active)
0371: D0 F6     BNE   $0369         (Loop while active voices are left)
0373: C8 18     CMP   X,#$18        (
0375: B0 1D     BCS   $0394         (Return if?)
0377: 3F 95 03  CALL  $0395         (Process Tempo, Echo and Filter Envelopes)
037A: 3F E1 09  CALL  $09E1         (Process Ports)
037D: E8 78     MOV   A,#$78        (A = #$78)
037F: 60        CLRC                (Clear Carry for addition)
0380: 84 48     ADC   A,$48         (Add SFX Tempo Counter)
0382: C4 48     MOV   $48,A         (Store SFX Tempo Counter)
0384: 90 0E     BCC   $0394         (Return if
0386: CD 18     MOV   X,#$18
0388: 8F 10 8F  MOV   $8F,#$10
038B: E4 83     MOV   A,$83         (A = Game Sound Effect Voices)
038D: 04 84     OR    A,$84         (with System Sound Effect Voices)
038F: 9F        XCN   A             (Swap high 4 and low 4 bits)
0390: C4 A0     MOV   $A0,A         (Set Active Voices)
0392: 2F D9     BRA   $036D         (Loop)
0394: 6F        RET                 (Return)

; Process Tempo, Echo and Filter Envelopes
0395: E4 49     MOV   A,$49         (A = Tempo Envelope Counter)
0397: F0 08     BEQ   $03A1         (Skip if zero)
0399: 8B 49     DEC   $49           (Decrement Tempo Envelope Counter)
039B: BA 4A     MOVW  YA,$4A        (A = Tempo Envelope Change Rate)
039D: 7A 45     ADDW  YA,$45        (Add Current Tempo)
039F: DA 45     MOVW  $45,YA        (Store Current Tempo)
03A1: E4 50     MOV   A,$50         (A = Echo Volume Envelope Counter)
03A3: F0 08     BEQ   $03AD         (Skip if zero)
03A5: 8B 50     DEC   $50           (Decrement Echo Volume Envelope Counter)
03A7: BA 4E     MOVW  YA,$4E        (Echo Volume Envelope Change Rate)
03A9: 7A 4C     ADDW  YA,$4C        (Add Echo Volume)
03AB: DA 4C     MOVW  $4C,YA        (Set Echo Volume)
03AD: E4 78     MOV   A,$78         (A = Echo Feedback Envelope Counter)
03AF: F0 08     BEQ   $03B9         (Skip if zero)
03B1: 8B 78     DEC   $78           (Decrement Echo Feedback Envelope Counter)
03B3: BA 79     MOVW  YA,$79        (A = Echo Feedback Envelope Change Rate)
03B5: 7A 75     ADDW  YA,$75        (Add Echo Feedback)
03B7: DA 75     MOVW  $75,YA        (Store Echo Feedback)
03B9: E4 77     MOV   A,$77         (A = Filter Envelope Counter)
03BB: F0 1B     BEQ   $03D8         (Return if zero)
03BD: 8B 77     DEC   $77           (Decrement Filter Envelope Counter)
03BF: CD 10     MOV   X,#$10        (X = #$10)
03C1: F5 FF 00  MOV   A,$00FF+X     (A = Filter Envelope Change Rate high)
03C4: FD        MOV   Y,A           (Transfer A to Y)
03C5: F5 FE 00  MOV   A,$00FE+X     (A = Filter Envelope Change Rate low)
03C8: DA 98     MOVW  $98,YA        ($98 = Filter Envelope Change Rate)
03CA: F4 63     MOV   A,$63+X       (A = Filter Data low)
03CC: FB 64     MOV   Y,$64+X       (Y = Filter Data high)
03CE: 7A 98     ADDW  YA,$98        (Add Change Rate to Data)
03D0: D4 63     MOV   $63+X,A       (Set FIlter Data low)
03D2: DB 64     MOV   $64+X,Y       (Set Filter Data high)
03D4: 1D        DEC   X             (Decrement X)
03D5: 1D        DEC   X             (Decrement X, next voice)
03D6: D0 E9     BNE   $03C1         (Loop for all voices)
03D8: 6F        RET                 (Return)

; Handle Song Script Code
03D9: 3F C9 05  CALL  $05C9         (Next Script Op Code)
03DC: 68 C4     CMP   A,#$C4        (Is Track Command)
03DE: 90 05     BCC   $03E5         (If not skip to Notes)
03E0: 3F B5 05  CALL  $05B5         (Handle Track Commands)
03E3: 2F F4     BRA   $03D9         (Loop)
03E5: FB 25     MOV   Y,$25+X       (Y = Ticks Left for Current Voice)
03E7: D0 0C     BNE   $03F5         (If Ticks Left, skip to handle Note)
03E9: 8D 00     MOV   Y,#$00        (Zero Y)
03EB: CD 0E     MOV   X,#$0E        (X = 13)
03ED: 9E        DIV   YA,X          (A = Note, Y = Duration Pointer)
03EE: F8 A3     MOV   X,$A3         (X = Voice Pointer)
03F0: F6 D1 17  MOV   A,$17D1+Y     (A = Duration in Ticks)
03F3: D4 25     MOV   $25+X,A       (Set as Ticks Left for Current Voice)
03F5: 78 A8 A2  CMP   $A2,#$A8      (Is a note value)
03F8: 90 09     BCC   $0403         (Handle Note)
03FA: 78 B6 A2  CMP   $A2,#$B6      (Is a Tie)
03FD: B0 03     BCS   $0402         (Return if not)
03FF: 5F 99 04  JMP   $0499         (Handle Tie)
0402: 6F        RET                 (Return)

; Handle Note Value
0403: E4 A2     MOV   A,$A2         (Current Op Code, Note and Duration)
0405: 8D 00     MOV   Y,#$00        (Zero Y)
0407: CD 0E     MOV   X,#$0E        (X = 13)
0409: 9E        DIV   YA,X          (A / 13, A = Note, Y = Duration Pointer) 
040A: C4 A2     MOV   $A2,A         (Set Current Note to $A2)
040C: F8 A3     MOV   X,$A3         (X = Voice Pointer)
040E: F5 00 F6  MOV   A,$F600+X     (A = Octave)
0411: 8D 0C     MOV   Y,#$0C        (Y = 12)
0413: CF        MUL   YA            (Octave * 12)
0414: 60        CLRC                (Clear Carry for addition)
0415: 84 A2     ADC   A,$A2         (Add Current Note)
0417: 60        CLRC                (Clear Carry for addition)
0418: 95 21 F7  ADC   A,$F721+X     (Add Transposition)
041B: 80        SETC                (Set Carry for subtraction)
041C: A8 0A     SBC   A,#$0A        (Subtract 10)
041E: D5 61 F7  MOV   $F761+X,A     (Set as Absolute Pitch)
0421: 3F 54 05  CALL  $0554         (Note Pitch Calculation, VxPITCH)
0424: E4 C0     MOV   A,$C0         (A = Calculated VxPITCH low)
0426: D5 E0 F8  MOV   $F8E0+X,A     (Set Calculated VxPITCH to $F8E0+X)
0429: E4 C1     MOV   A,$C1         (A = Calculated VxPITCH high)
042B: D5 E1 F8  MOV   $F8E1+X,A     (Set Calculated VxPITCH to $F8E1+X)
042E: F5 51 01  MOV   A,$0151+X     (A = Vibrato Amplitude)
0431: F0 05     BEQ   $0438         (Skip if no Vibrato)
0433: C4 A2     MOV   $A2,A         ($A2 = Vibrato Amplitude)
0435: 3F 02 13  CALL  $1302         (Restart Vibrato)
0438: F5 70 01  MOV   A,$0170+X     (A = Tremolo)
043B: F0 07     BEQ   $0444         (Skip if no Tremolo)
043D: C4 A2     MOV   $A2,A         ($A2 = Tremolo 
043F: 3F B6 13  CALL  $13B6         (Restart Tremolo)
0442: E8 00     MOV   A,#$00        (Zero A)
0444: D5 C0 F8  MOV   $F8C0+X,A     (Zero Vibrato Value low)
0447: D5 C1 F8  MOV   $F8C1+X,A     (Zero Vibrato Value high)
044A: D5 60 F8  MOV   $F860+X,A     (Zero Tremolo Value low)
044D: D5 61 F8  MOV   $F861+X,A     (Zero Tremolo Value high)
0450: D5 80 F7  MOV   $F780+X,A     (Zero Pitch Envelope Change Rate low)
0453: D5 81 F7  MOV   $F781+X,A     (Zero Pitch Envelope Change Rate high)
0456: C8 10     CMP   X,#$10        (X > #$10)
0458: B0 20     BCS   $047A         (If SFX skip 15 instructions)
045A: 09 8F 23  OR    ($23),($8F)   (Set Key-On, paused song for Current Voice)
045D: E4 83     MOV   A,$83         (A = Game SFX Voices)
045F: 04 84     OR    A,$84         (with System SFX Voices)
0461: 24 8F     AND   A,$8F         (Isolate Current Voice)
0463: D0 34     BNE   $0499         (If SFX Voice )
0465: E4 8F     MOV   A,$8F         (A = Current Voice)
0467: 24 5F     AND   A,$5F         (And Drum Roll Enabled)
0469: D0 22     BNE   $048D         (If so skip ? instructions)
046B: E4 8F     MOV   A,$8F         (A = Current Voice)
046D: 24 5B     AND   A,$5B         (And Slur Enabled)
046F: F0 1C     BEQ   $048D         (If not skip ? instructions)
0471: 24 5D     AND   A,$5D         (And Slur Active)
0473: D0 1B     BNE   $0490         (If so skip 12 instructions)
0475: 09 8F 5D  OR    ($5D),($8F)   (Set Active Slur for Current Voice)
0478: 2F 13     BRA   $048D         (Skip 9 instructions)
047A: E4 8F     MOV   A,$8F         (A = Current Voice)
047C: 24 60     AND   A,$60         (And SFX Drum Roll Enabled)
047E: D0 0D     BNE   $048D         (If so skip 6 instructions)
0480: E4 8F     MOV   A,$8F         (A = Current Voice)
0482: 24 5C     AND   A,$5C         (And SFX Slur Enabled)
0484: F0 07     BEQ   $048D         (If not skip 3 instructions)
0486: 24 5E     AND   A,$5E         (And SFX Slur Active)
0488: D0 06     BNE   $0490         (If so skip 2 instructions)
048A: 09 8F 5E  OR    ($5E),($8F)   (Set Active Slur SFX for Current Voice)
048D: 09 8F 22  OR    ($22),($8F)   (Set Key-On for Current Voice)
0490: 09 8F DB  OR    ($DB),($8F)   (Set Enable Volume Update in DSP for Current Voice)
0493: 09 8F DC  OR    ($DC),($8F)   (Set Enable Pitch Update in DSP for Current Voice)
0496: 3F 29 15  CALL  $1529         (Update DSP SRCN for Voice with Instrument)

; Continue Note Processing
0499: 3F D4 05  CALL  $05D4         (Handle some Track Commands)
049C: FD        MOV   Y,A           (Transfer A to Y)
049D: E4 8F     MOV   A,$8F         (A = Current Voice)
049F: C8 10     CMP   X,#$10        (X > #$10)
04A1: B0 21     BCS   $04C4         (If SFX skip 14 instructions)
04A3: AD B6     CMP   Y,#$B6        (Y > #$B6)
04A5: B0 09     BCS   $04B0         (If so skip 4 instructions)
04A7: AD A8     CMP   Y,#$A8        (Y < #$A8)
04A9: 90 0B     BCC   $04B6         (If so skip 4 instructions)
04AB: 0E 59 00  TSET1 $0059         (Set Disable Key-Off at End of Note)
04AE: 2F 33     BRA   $04E3         (Skip 21 instructions)
04B0: 4E 5B 00  TCLR1 $005B         (Disable Slur)
04B3: 4E 5F 00  TCLR1 $005F         (Disable Drum Roll)
04B6: 4E 59 00  TCLR1 $0059         (Clear Disable Key-Off at End of Note)
04B9: E4 5B     MOV   A,$5B         (A = Enable Slur)
04BB: 04 5F     OR    A,$5F         (with Enable Drum Roll)
04BD: 24 8F     AND   A,$8F         (Isolate Current Voice)
04BF: 0E 59 00  TSET1 $0059         (Set Disable Key-Off at End of Note)
04C2: 2F 1F     BRA   $04E3         (Skip 13 instructions)
04C4: AD B6     CMP   Y,#$B6        (Y > #$B6)
04C6: B0 09     BCS   $04D1         (If so skip 4 instructions)
04C8: AD A8     CMP   Y,#$A8        (Y < #$A8)
04CA: 90 0B     BCC   $04D7         (If so skip 4 instructions)
04CC: 0E 5A 00  TSET1 $005A         (Set Disable Key-Off at End of Note SFX)
04CF: 2F 12     BRA   $04E3         (Skip 7 instructions)
04D1: 4E 5C 00  TCLR1 $005C         (Disable Slur SFX)
04D4: 4E 60 00  TCLR1 $0060         (Disable Drum Roll SFX)
04D7: 4E 5A 00  TCLR1 $005A         (Clear Disable Key Off at End of Note SFX)
04DA: E4 5C     MOV   A,$5C         (A = Enable Slur SFX)
04DC: 04 60     OR    A,$60         (with Enable Drum Roll SFX)
04DE: 24 8F     AND   A,$8F         (Isolate Current Voice)
04E0: 0E 5A 00  TSET1 $005A         (Set Disable Key-Off at End of Note SFX)
04E3: F5 50 01  MOV   A,$0150+X     (A = Pitch Envelope Target)
04E6: F0 6B     BEQ   $0553         (If none skip  instructions)
04E8: 60        CLRC                (Clear Carry for addition)
04E9: 95 61 F7  ADC   A,$F761+X     (Add Absolute Pitch)
04EC: D5 61 F7  MOV   $F761+X,A     (Set Absolute Pitch)
04EF: 3F 54 05  CALL  $0554         (Note Pitch Calculation, VxPITCH)
04F2: F5 E1 F8  MOV   A,$F8E1+X     (A = Last Calculated Frequency Value high)
04F5: FD        MOV   Y,A           (Transfer A to Y)
04F6: F5 E0 F8  MOV   A,$F8E0+X     (A = Last Calculated Frequency Value low)
04F9: DA 98     MOVW  $98,YA        ($98 = Last Calculated Frequency Value)
04FB: BA C0     MOVW  YA,$C0        (YA = Calculated Frequency Value)
04FD: 80        SETC                (Set Carry for subtraction)
04FE: 9A 98     SUBW  YA,$98        (Subtract Last Calculated Frequency Value)
0500: DA 98     MOVW  $98,YA        ($98 = Calculated Frequency Value Diff)
0502: 0D        PUSH  PSW           (Save Flags)
0503: B0 08     BCS   $050D         (If lower frequency skip 3 instructions)
0505: 58 FF 98  EOR   $98,#$FF      (Invert Calculated Frequency Value Diff low)
0508: 58 FF 99  EOR   $99,#$FF      (Invert Calculated Frequency Value Diff high)
050B: 3A 98     INCW  $98           (Increment Calculated Frequency Value Diff)
050D: F5 20 F7  MOV   A,$F720+X     (A = Pitch Envelope Duration)
0510: D0 05     BNE   $0517         (If envelope skip 2 instructions)
0512: 8F 00 9A  MOV   $9A,#$00      ($9A = 0)
0515: 2F 12     BRA   $0529         (Skip 11 instructions)
0517: 5D        MOV   X,A           (Transfer A to X)
0518: E4 99     MOV   A,$99         (A = Calculated Frequency Value Diff high)
051A: 8D 00     MOV   Y,#$00        (Zero Y)
051C: 9E        DIV   YA,X          (YA / X = Frequency Change Rate high)
051D: C4 9A     MOV   $9A,A         ($9A = Frequency Change Rate high)
051F: E4 98     MOV   A,$98         (A = Calculated Frequency Value Diff low)
0521: 9E        DIV   YA,X          (YA / X = Frequency Change Rate low)
0522: C4 99     MOV   $99,A         ($99 = Frequency Change Rate low)
0524: E8 00     MOV   A,#$00        (Zero A)
0526: 9E        DIV   YA,X          (YA / X = Frequency Change Rate remainder) 
0527: C4 98     MOV   $98,A         ($98 = Frequency Change Rate remainder)
0529: 8E        POP   PSW           (Restore Flags)
052A: B0 0F     BCS   $053B         (If frequency diff negative skip 6 instructions)
052C: 58 FF 98  EOR   $98,#$FF      (Invert Frequency Change Rate remainder)
052F: 58 FF 99  EOR   $99,#$FF      (Invert Frequency Change Rate low)
0532: 58 FF 9A  EOR   $9A,#$FF      (Invert Frequency Change Rate high)
0535: 3A 98     INCW  $98           (Increment $98)
0537: D0 02     BNE   $053B         (If value skip next instruction)
0539: AB 9A     INC   $9A           (Increment Frequency Change Rate high)
053B: F8 A3     MOV   X,$A3         (X = Voice Pointer)
053D: BA 99     MOVW  YA,$99        (YA = Frequency Change Rate)
053F: D5 80 F7  MOV   $F780+X,A     (Set Pitch Envelope Change Rate low)
0542: DD        MOV   A,Y           (Transfer Y to A)
0543: D5 81 F7  MOV   $F781+X,A     (Set Pitch Envelope Change Rate high)
0546: E4 98     MOV   A,$98         (A = Frequency Change Rate remainder)
0548: D5 A0 F8  MOV   $F8A0+X,A     (Set Pitch Envelope Change Rate Fraction)
054B: E8 00     MOV   A,#$00        (Zero A)
054D: D5 50 01  MOV   $0150+X,A     (Zero Pitch Envelope Target)
0550: D5 A1 F8  MOV   $F8A1+X,A     (Zero Pitch Envelope Change Rate Fraction high)
0553: 6F        RET                 (Return)

; Note Pitch Calculation:
; Converts the tracker note value to a value that VxPITCHL/H can use
;
; Looking at Chrono Trigger disassmebly FF6 seems to have a bug, missing instruction,
; this results in the fine tune (low byte of instrument pitch) being slightly miscalculated.
;
; A rough overview of the routine:
; Input: A (note value)
; 1. A gets divided by 0x0C (12 decimal). The remainder is the note (Y), and the quotient is the octave (A)
; 2. (Voice Pitch Multiplier + Detune) * Note Pitch Multiplier = VxPITCHL/H
; 3. VxPITCHL/H gets shifted by octave.
; Additional pitch manipulation (Vibrato and Master Pitch) happens in the DSP Pitch routine.

0554: CD 0C     MOV   X,#$0C        (Divisor: 12)
0556: 8D 00     MOV   Y,#$00        (Zero Y)
0558: 9E        DIV   YA,X          (Y = Note, A = Octave)
0559: F8 A3     MOV   X,$A3         (Transfer Voice Pointer to X)
055B: C4 A1     MOV   $A1,A         (Transfer Octave to $A1)
055D: DD        MOV   A,Y           (Transfer Note to A)
055E: 1C        ASL   A             (Double A)
055F: FD        MOV   Y,A           (Transfer A to Y; Note*2)
0560: F6 8F 17  MOV   A,$178F+Y     (Transfer Note Pitch Multiplier Low to A)
0563: C4 C2     MOV   $C2,A         (Store in $C2)
0565: F6 90 17  MOV   A,$1790+Y     (Transfer Note Pitch Multiplier High to A)
0568: C4 C3     MOV   $C3,A         (Store in $C3)
056A: FD        MOV   Y,A           (Transfer A to Y)
056B: F5 40 F7  MOV   A,$F740+X     (Transfer Voice Pitch Multiplier Low to A)
056E: 60        CLRC                (Clear Carry for addition)
056F: 95 60 F7  ADC   A,$F760+X	    (Add Detune to A)
0572: 0D        PUSH  PSW           (Push Flags)
0573: 2D        PUSH  A             (Push Voice Pitch Multiplier Low and Detune)
0574: CF        MUL   YA            (Note Pitch Multiplier High * Voice Pitch Multiplier Low and Detune)
0575: DA C0     MOVW  $C0,YA        (Transfer Calculated Frequency Value to $C0)
0577: EB C2     MOV   Y,$C2         (Transfer Note Pitch Multiplier Low to Y)
0579: AE        POP   A             (Pull Voice Pitch Multiplier Low and Detune)
057A: CF        MUL   YA            (Note Pitch Multipler Low * Voice Pitch Multiplier Low and Detune)
057B: DD        MOV   A,Y           (Transfer Calculated Frequency Value High to A)
057C: 8D 00     MOV   Y,#$00        (Zero Y)
057E: 7A C0     ADDW  YA,$C0        (Add Calculated Frequency Values)
0580: DA C0     MOVW  $C0,YA        (Transfer Calculated Frequency Value to $C0)
0582: F5 41 F7  MOV   A,$F741+X     (Transfer Voice Pitch Multiplier High to A, overwrites Calculated Frequency Value Low)
0585: F0 08     BEQ   $058F         (Skip if #$00)
0587: CF        MUL   YA            (Calculated Frequency Value High * Voice Pitch Multiplier High)
0588: DD        MOV   A,Y           (Transfer Y to A, Calculated Frequency Value High to A)
0589: 8D 00     MOV   Y,#$00        (Zero Y)
058B: 7A C0     ADDW  YA,$C0        (Add Calculated Frequency Values)
058D: 2F 02     BRA   $0591         (Skip next instruction)
058F: E4 C0     MOV   A,$C0         (Transfer Calculated Frequency Value to A)
0591: 8E        POP   PSW           (Pull Flags)
0592: 30 02     BMI   $0596         (Branch if Voice Pitch Multiplier Low is signed negative)
0594: 7A C2     ADDW  YA,$C2        (Add Note Pitch Multiplier H&L to Calculated Frequency Value)
0596: DA C0     MOVW  $C0,YA        (Store Calculated Frequency Value to $C0)
0598: E8 04     MOV   A,#$04        (Transfer #$04 to A, default octave value)
059A: EB A1     MOV   Y,$A1         (Transfer Octave to Y)
059C: 30 0E     BMI   $05AC         (Branch if Octave is negative)
059E: 64 A1     CMP   A,$A1         (Compare #$04 to Octave)
05A0: B0 0F     BCS   $05B1         (Branch if Carry set?)
05A2: 0B C0     ASL   $C0           (<< $C0, increment octave)
05A4: 2B C1     ROL   $C1           (<< $C1, increment octave with carry from $C0)
05A6: BC        INC   A             (Increment A)
05A7: 2E A1 F8  CBNE  $A1,$05A2     (A != Target Octave then branch to $05A2, loop)
05AA: 2F 08     BRA   $05B4         (Exit) (RET...)
05AC: 4B C1     LSR   $C1           (>> $C1, decrement octave)
05AE: 6B C0     ROR   $C0           (>> $C0, decrement octave with carry from $C1)
05B0: 9C        DEC   A             (Decrement A)
05B1: 2E A1 F8  CBNE  $A1,$05AC     (A != Target Octave then branch to $05AC, loop)
05B4: 6F        RET                 (Return)

; Handle Track Commands from JMP Table
05B5: A8 C4     SBC   A,#$C4        (A = Track Command #)
05B7: 1C        ASL   A             (Double A)
05B8: FD        MOV   Y,A           (Transfer A to Y)
05B9: F6 82 18  MOV   A,$1882+Y     (Pointer to JMP Table, high byte)
05BC: 2D        PUSH  A             (Push on stack)
05BD: F6 81 18  MOV   A,$1881+Y     (Pointer to JMP Table, low byte)
05C0: 2D        PUSH  A             (Push on stack)
05C1: DD        MOV   A,Y           (Transfer Y to A)
05C2: 5C        LSR   A             (Halve A)
05C3: FD        MOV   Y,A           (Transfer A to Y)
05C4: F6 F9 18  MOV   A,$18F9+Y     (Number of parameter bytes)
05C7: F0 0A     BEQ   $05D3         (Return if none)

; Next Script Op Code
05C9: E7 02     MOV   A,($02+X)     (A = Script Op Code)
05CB: C4 A2     MOV   $A2,A         ($A2 = Script Op Code)
05CD: BB 02     INC   $02+X         (Increment Script Pointer)
05CF: D0 02     BNE   $05D3         (Return if not $00)
05D1: BB 03     INC   $03+X         (Carry to high byte)
05D3: 6F        RET                 (Return)

; Handle some Track Commands
05D4: F4 02     MOV   A,$02+X       (A = Current Script Pointer low)
05D6: FB 03     MOV   Y,$03+X       (Y = Current Script Pointer high)
05D8: DA 90     MOVW  $90,YA        ($90 = Current Script Pointer)
05DA: F4 26     MOV   A,$26+X       (A = Pointer to Loop Count)
05DC: C4 C5     MOV   $C5,A         ($C5 = Current Pointer to Loop Count)
05DE: 8D 00     MOV   Y,#$00        (Zero Y)
05E0: F7 90     MOV   A,($90)+Y     (A = Current Operation)
05E2: 68 C4     CMP   A,#$C4        (A < #$C4, Note Command) 
05E4: 90 61     BCC   $0647         (Exit)
05E6: 3A 90     INCW  $90           (Point to first parameter of track command)
05E8: 68 EB     CMP   A,#$EB        (== #$EB End of Song Script)
05EA: F0 5B     BEQ   $0647         (Exit)
05EC: 68 F6     CMP   A,#$F6        (== #$F6 Jump to xxxx)
05EE: D0 05     BNE   $05F5         (If not skip 2 instructions)
05F0: 3F 58 16  CALL  $1658         (Switch #$F6: Jump to xxxx)
05F3: 2F E9     BRA   $05DE         (Loop)
05F5: 68 E3     CMP   A,#$E3        (== #$E3 Loop End)
05F7: D0 05     BNE   $05FE         (If not skip 2 instructions)
05F9: 3F 25 17  CALL  $1725         (Switch $E3: Loop End)
05FC: 2F E0     BRA   $05DE         (Loop)
05FE: 68 F5     CMP   A,#$F5        (== #$F5 Jump to yyyy when loop count reaches xx)
0600: D0 05     BNE   $0607         (If not skip 2 instructions)
0602: 3F 95 16  CALL  $1695         (Switch $F5: Jump to yyyy when loop count reaches xx)
0605: 2F D7     BRA   $05DE         (Loop)
0607: 68 E5     CMP   A,#$E5        (== #$E5 Disable Slur)
0609: D0 05     BNE   $0610         (If not skip 2 instructions)
060B: 3F CF 15  CALL  $15CF         (Track Command $E5: Disable Slur)
060E: 2F CE     BRA   $05DE         (Loop)
0610: 68 E7     CMP   A,#$E7        (== #$E7 Disable Drum Roll)
0612: D0 05     BNE   $0619         (If not skip 2 instructions)
0614: 3F F3 15  CALL  $15F3         (Track Command $E7: Disable Drum Roll)
0617: 2F C5     BRA   $05DE         (Loop)
0619: 68 E9     CMP   A,#$E9        (== #$E9 Play Game SFX, voice A)
061B: D0 05     BNE   $0622         (If not skip 2 instructions)
061D: 3F 33 16  CALL  $1633         (Switch $E9: Play Game SFX, voice A)
0620: 2F BC     BRA   $05DE         (Loop)
0622: 68 EA     CMP   A,#$EA        (== #$EA Play Game SFX, voice B)
0624: D0 05     BNE   $062B         (If not skip 2 instructions)
0626: 3F 39 16  CALL  $1639         (Switch $EA: Play Game SFX, voice B)
0629: 2F B3     BRA   $05DE         (Loop)
062B: 68 DC     CMP   A,#$DC        (== #$DC Set Instrument)
062D: D0 08     BNE   $0637         (If not skip 3 instructions)
062F: 3F CF 15  CALL  $15CF         (Track Command $E5: Disable Slur)
0632: 3F F3 15  CALL  $15F3         (Track Command $E7: Disable Drum Roll)
0635: 2F A7     BRA   $05DE         (Loop)
0637: 80        SETC                (Set Carry for subtraction)
0638: A8 C4     SBC   A,#$C4        (Index from #$C4)
063A: FD        MOV   Y,A           (Transfer A to Y)
063B: F6 F9 18  MOV   A,$18F9+Y     (Number of bytes for Track Command)
063E: F0 9E     BEQ   $05DE         (Loop if no parameters)
0640: FD        MOV   Y,A           (Transfer A to Y)
0641: 3A 90     INCW  $90           (Next parameter)
0643: FE FC     DBNZ  Y,$0641       (Decrease Y, loop unless zero)
0645: 2F 99     BRA   $05E0         (Loop)
0647: 6F        RET                 (Return)

; Store A to DSP register Y
0648: CB F2     MOV   $F2,Y         (Set register address)
064A: C4 F3     MOV   $F3,A         (Write parameter)
064C: 6F        RET                 (Return)

; Enable all timers; reset input from ports 0 and 1
064D: 8F 17 F1  MOV   $F1,#$17      (Enable all 3 timers; reset input from ports 0 and 1)
0650: 8F 07 F1  MOV   $F1,#$07      (Enable all 3 timers...)
0653: 6F        RET                 (Return)

; Process Volume, Pan and Pansweep Envelopes
0654: 40        SETP                (Set direct page flag)
0655: F4 11     MOV   A,$11+X       (A = SFX Song Script Pointer low ?)
0657: F0 02     BEQ   $065B         (If zero skip next instruction)
0659: 9B 11     DEC   $11+X         (Decrement )
065B: F4 31     MOV   A,$31+X
065D: F0 02     BEQ   $0661         (If zero skip next instruction)
065F: 9B 31     DEC   $31+X
0661: 20        CLRP                (Clear direct page flag)
0662: F5 A0 F6  MOV   A,$F6A0+X     (A = Volume Envelope Counter)
0665: F0 26     BEQ   $068D         (If no envelope skip 16 instructions)
0667: 9C        DEC   A             (Decrement A)
0668: D5 A0 F6  MOV   $F6A0+X,A     (Set Volume Envelope Counter)
066B: F5 20 F6  MOV   A,$F620+X     (A = Voice Volume low)
066E: C4 98     MOV   $98,A         (Set $98)
0670: F5 21 F6  MOV   A,$F621+X     (A = Voice Volume high)
0673: C4 99     MOV   $99,A         (Set $99)
0675: F5 41 F6  MOV   A,$F641+X     (A = Voice Envelope Change Rate high)
0678: FD        MOV   Y,A           (Transfer A to Y)
0679: F5 40 F6  MOV   A,$F640+X     (A = Voice Envelope Change Rate low)
067C: 7A 98     ADDW  YA,$98        (Add Voice Volume)
067E: D5 20 F6  MOV   $F620+X,A     (Set Voice Volume low)
0681: DD        MOV   A,Y           (Transfer Y to A)
0682: 75 21 F6  CMP   A,$F621+X     (Check if Volume Changed)
0685: D5 21 F6  MOV   $F621+X,A     (Set Voice Volume high)
0688: F0 03     BEQ   $068D         (If no volume skip next instruction)
068A: 09 8F DB  OR    ($DB),($8F)   (Enable Volume Update in DSP for Current Voice)
068D: F5 A1 F6  MOV   A,$F6A1+X     (A = Pan Envelope Counter)
0690: F0 26     BEQ   $06B8         (If no envelope skip 16 instructions)
0692: 9C        DEC   A             (Decrement A)
0693: D5 A1 F6  MOV   $F6A1+X,A     (Set Pan Envelope Counter)
0696: F5 60 F6  MOV   A,$F660+X     (A = Voice Pan low)
0699: C4 98     MOV   $98,A         (Set $98)
069B: F5 61 F6  MOV   A,$F661+X     (A = Voice Pan high)
069E: C4 99     MOV   $99,A         (Set $99)
06A0: F5 81 F6  MOV   A,$F681+X     (A = Pan Envelope Change Rate high)
06A3: FD        MOV   Y,A           (Transfer A to Y)
06A4: F5 80 F6  MOV   A,$F680+X     (A = Pan Envelope Change Rate low)
06A7: 7A 98     ADDW  YA,$98        (Add Voice Pan)
06A9: D5 60 F6  MOV   $F660+X,A     (Set Voice Pan low)
06AC: DD        MOV   A,Y           (Transfer Y to A)
06AD: 75 61 F6  CMP   A,$F661+X     (Check if Pan Changed)
06B0: D5 61 F6  MOV   $F661+X,A     (Set Voice Pan high)
06B3: F0 03     BEQ   $06B8         (If no change skip next instruction)
06B5: 09 8F DB  OR    ($DB),($8F)   (Enable Volume Update in DSP for Current Voice)
06B8: F5 A0 F8  MOV   A,$F8A0+X     (A = Pitch Envelope Change Rate fraction)
06BB: C4 98     MOV   $98,A         (Set $98)
06BD: F5 80 F7  MOV   A,$F780+X     (A = Pitch Envelope Change Rate low)
06C0: C4 99     MOV   $99,A         (Set $99)
06C2: F5 81 F7  MOV   A,$F781+X     (A = Pitch Envelope Change Rate high)
06C5: C4 9A     MOV   $9A,A         (Set $9A)
06C7: BA 98     MOVW  YA,$98        (YA = Pitch Envelope Change Rate low and fraction)
06C9: D0 04     BNE   $06CF         (If envelope skip 2 instructions)
06CB: E4 9A     MOV   A,$9A         (A = Pitch Envelope Change Rate high)
06CD: F0 2E     BEQ   $06FD         (If zero skip 19 instructions)
06CF: F5 20 F7  MOV   A,$F720+X     (A = Pitch Envelope Duration)
06D2: 9C        DEC   A             (Decrement A)
06D3: D0 09     BNE   $06DE         (If counting skip 3 instructions)
06D5: D5 80 F7  MOV   $F780+X,A     (Zero Pitch Envelope Change Rate low)
06D8: D5 81 F7  MOV   $F781+X,A     (Zero Pitch Envelope Change Rate high)
06DB: D5 A0 F8  MOV   $F8A0+X,A     (Zero Pitch Envelope Change Rate fraction)
06DE: D5 20 F7  MOV   $F720+X,A     (Set Pitch Envelope Duration)
06E1: 60        CLRC                (Clear Carry)
06E2: F5 E0 F8  MOV   A,$F8E0+X     (A = Calculated Frequency Value low)
06E5: FD        MOV   Y,A           (Transfer A to Y)
06E6: F5 A1 F8  MOV   A,$F8A1+X     (A = Pitch Envelope Change Rate fraction high)
06E9: 7A 98     ADDW  YA,$98        (Add Pitch Envelope Change Rate low and fraction)
06EB: D5 A1 F8  MOV   $F8A1+X,A     (Set Pitch Envelope Change Rate fraction high)
06EE: DD        MOV   A,Y           (Transfer Y to A)
06EF: D5 E0 F8  MOV   $F8E0+X,A     (Set Calculataed Frequency Value low)
06F2: E4 9A     MOV   A,$9A         (A = Pitch Envelope Change Rate high)
06F4: 95 E1 F8  ADC   A,$F8E1+X     (Add Calculated Frequency Value high)
06F7: D5 E1 F8  MOV   $F8E1+X,A     (Set Calculated Frequency Value high)
06FA: 09 8F DC  OR    ($DC),($8F)   (Enable Pitch Update in DSP for Current Voice)
06FD: F5 71 01  MOV   A,$0171+X     (A = Pansweep)
0700: F0 42     BEQ   $0744         (If no pansweep exit)
0702: F5 A0 F7  MOV   A,$F7A0+X     (A = Pansweep Change Rate low)
0705: C4 98     MOV   $98,A         (Set $98)
0707: F5 A1 F7  MOV   A,$F7A1+X     (A = Pansweep Change Rate high)
070A: C4 99     MOV   $99,A         (Set $99)
070C: F5 81 F8  MOV   A,$F881+X     (A = Pansweep Value high)
070F: FD        MOV   Y,A           (Transfer A to Y)
0710: C4 9A     MOV   $9A,A         (Set $9A)
0712: F5 80 F8  MOV   A,$F880+X     (A = Pansweep Value low)
0715: 7A 98     ADDW  YA,$98        (Add Pansweep Change Rate)
0717: D5 80 F8  MOV   $F880+X,A     (Set Pansweep Value low)
071A: DD        MOV   A,Y           (Transfer Y to A)
071B: 75 81 F8  CMP   A,$F881+X     (Detect if Pansweep Value changed)
071E: D5 81 F8  MOV   $F881+X,A     (Set Pansweep Value high)
0721: F0 03     BEQ   $0726         (If no change skip next instruction)
0723: 09 8F DB  OR    ($DB),($8F)   (Enable Volume Update in DSP for Current Voice)
0726: F5 01 F7  MOV   A,$F701+X     (A = Pansweep Cycle Counter)
0729: 9C        DEC   A             (Decrement A)
072A: D0 15     BNE   $0741         (If counting skip 8 instructions) 
072C: 58 FF 98  EOR   $98,#$FF      (Invert Pansweep Change Rate low)
072F: 58 FF 99  EOR   $99,#$FF      (Invert Pansweep Change Rate high)
0732: 3A 98     INCW  $98           (Increment Pansweep Change Rate)
0734: E4 98     MOV   A,$98         (A = Pansweep Change Rate low)
0736: D5 A0 F7  MOV   $F7A0+X,A     (Set Pansweep Change Rate low)
0739: E4 99     MOV   A,$99         (A = Pansweep Change Rate high)
073B: D5 A1 F7  MOV   $F7A1+X,A     (Set Pansweep Change Rate high)
073E: F5 00 F7  MOV   A,$F700+X     (A = Pansweep Cycle Duration)
0741: D5 01 F7  MOV   $F701+X,A     (Set Pansweep Cycle Counter)
0744: 6F        RET                 (Return)

; Process Vibrato and Tremolo
0745: F5 51 01  MOV   A,$0151+X     (A = Vibrato Amplitude)
0748: F0 07     BEQ   $0751         (If zero skip 3 instructions)
074A: C4 A2     MOV   $A2,A         ($A2 = Vibrato Amplitude)
074C: F5 11 01  MOV   A,$0111+X     (A = Vibrato Predelay Counter)
074F: F0 03     BEQ   $0754         (If zero skip next instruction)
0751: 5F FC 07  JMP   $07FC         (Jump to Tremolo)
0754: F5 E1 F7  MOV   A,$F7E1+X     (A = Vibrato Change Rate high)
0757: FD        MOV   Y,A           (Transfer A to Y)
0758: F5 E0 F7  MOV   A,$F7E0+X     (A = Vibrato Change Rate low)
075B: DA C0     MOVW  $C0,YA        ($C0 = Vibrato Change Rate)
075D: F5 41 F8  MOV   A,$F841+X     (A = Vibrato Value high)
0760: FD        MOV   Y,A           (Transfer A to Y)
0761: F5 40 F8  MOV   A,$F840+X     (A = Vibrato Value low)
0764: 7A C0     ADDW  YA,$C0        (Add Vibrato Value to Vibrato Change Rate)
0766: DA C2     MOVW  $C2,YA        (Store as Note Pitch Multiplier)
0768: D5 40 F8  MOV   $F840+X,A     (Set Vibrato Value low)
076B: DD        MOV   A,Y           (Transfer Y to A)
076C: 75 41 F8  CMP   A,$F841+X     (A == Vibrato Value high)
076F: F0 57     BEQ   $07C8         (If zero skip  instructions)
0771: D5 41 F8  MOV   $F841+X,A     (Set Vibrato Value high)
0774: 0B C2     ASL   $C2           (Double Note Pitch Multiplier low)
0776: 2B C3     ROL   $C3           (Double Note Pitch Multiplier high with carry)
0778: F5 E1 F8  MOV   A,$F8E1+X     (A = Calculated Frequency Value high)
077B: 8D 0F     MOV   Y,#$0F        (Y = #$0F)
077D: CF        MUL   YA            (Multiply)
077E: DA 98     MOVW  $98,YA        (Set to $98 word, Vibrato Max Range)
0780: F5 E0 F8  MOV   A,$F8E0+X     (A = Calculated Frequency Value low)
0783: 8D 0F     MOV   Y,#$0F        (Y = #$0F)
0785: CF        MUL   YA            (Multiply)
0786: DD        MOV   A,Y           (Transfer Y to A)
0787: 8D 00     MOV   Y,#$00        (Zero Y)
0789: 7A 98     ADDW  YA,$98        (Add Vibrato Max Range)
078B: DA 98     MOVW  $98,YA        (Set Vibrato Max Range)
078D: E4 C3     MOV   A,$C3         (A = Note Pitch Multiplier high)
078F: CF        MUL   YA            (Multiply)
0790: DA 9A     MOVW  $9A,YA        (Set to $9A word, new Calculated Vibrato Value)
0792: EB 98     MOV   Y,$98         (Y = Vibrato Max Range low)
0794: E4 C3     MOV   A,$C3         (A = Note Pitch Multiplier high)
0796: CF        MUL   YA            (Multiply)
0797: DD        MOV   A,Y           (Transfer Y to A)
0798: 8D 00     MOV   Y,#$00        (Zero Y)
079A: 7A 9A     ADDW  YA,$9A        (Add new Calculated Vibrato Value)
079C: DA 9A     MOVW  $9A,YA        (Set new Calculated Vibrato Value)
079E: EB C2     MOV   Y,$C2         (Y = Note Pitch Multiplier low)
07A0: E4 99     MOV   A,$99         (A = Vibrato Max Range high)
07A2: CF        MUL   YA            (Multiply)
07A3: DD        MOV   A,Y           (Transfer Y to A)
07A4: 8D 00     MOV   Y,#$00        (Zero Y)
07A6: 7A 9A     ADDW  YA,$9A        (Add new Calculated Vibrato Value)
07A8: DA 9A     MOVW  $9A,YA        (Set new Calculated Vibrato Value)
07AA: F3 C3 04  BBC7  $C3,$07B1     (If not signed skip next instruction)
07AD: 9A 98     SUBW  YA,$98        (Subtract Vibrato Max Range)
07AF: DA 9A     MOVW  $9A,YA        (Set new Calculated Vibrato Value)
07B1: F5 C1 F8  MOV   A,$F8C1+X     (A = Calculated Vibrato Value high)
07B4: FD        MOV   Y,A           (Transfer A to Y)
07B5: F5 C0 F8  MOV   A,$F8C0+X     (A = Calculated Vibrato Value low)
07B8: 5A 9A     CMPW  YA,$9A        (New Vibrato Value == Last Vibrato Value)
07BA: F0 0C     BEQ   $07C8         (If so skip 5 instructions)
07BC: BA 9A     MOVW  YA,$9A        (YA = new Calculated Vibrato Value)
07BE: D5 C0 F8  MOV   $F8C0+X,A     (Set Calculated Vibrato Value low)
07C1: DD        MOV   A,Y           (Transfer Y to A)
07C2: D5 C1 F8  MOV   $F8C1+X,A     (Set Calculated Vibrato Value high)
07C5: 09 8F DC  OR    ($DC),($8F)   (Enable Pitch Update in DSP for Current Voice)
07C8: F5 C1 F6  MOV   A,$F6C1+X     (A = Vibrato Cycle Counter)
07CB: 9C        DEC   A             (Decrement Vibrato Cycle Counter)
07CC: D0 2B     BNE   $07F9         (If counting skip 18 instructions)
07CE: F5 C1 F7  MOV   A,$F7C1+X     (A = Max Vibrato Change Rate high)
07D1: FD        MOV   Y,A           (Transfer A to Y)
07D2: F5 C0 F7  MOV   A,$F7C0+X     (A = Max Vibrato Change Rate low)
07D5: DA 98     MOVW  $98,YA        ($98 = Max Vibrato Change Rate)
07D7: E4 C1     MOV   A,$C1         (A = Vibrato Change Rate high)
07D9: C4 C2     MOV   $C2,A         ($C2 = Vibrato Change Rate high)
07DB: F5 90 01  MOV   A,$0190+X     (A = Tremolo/Vibrato Gain Counter)
07DE: C4 9B     MOV   $9B,A         (Set $9B)
07E0: 38 70 9B  AND   $9B,#$70      ($9B = Tremolo Gain Counter)
07E3: 28 07     AND   A,#$07        (A = Vibrato Gain Counter)
07E5: 3F 61 09  CALL  $0961         (Process Change Rate with Mode and Gain Counter)
07E8: D5 E0 F7  MOV   $F7E0+X,A     (Set Vibrato Change Rate low)
07EB: DD        MOV   A,Y           (Transfer Y to A)
07EC: D5 E1 F7  MOV   $F7E1+X,A     (Set Vibrato Change Rate high)
07EF: E4 9A     MOV   A,$9A         (A = Vibrato Gain Counter)
07F1: 04 9B     OR    A,$9B         (Join with Tremolo Gain Counter)
07F3: D5 90 01  MOV   $0190+X,A     (Set Tremolo/Vibrato Gain Counter)
07F6: F5 C0 F6  MOV   A,$F6C0+X     (A = Vibrato Cycle Duration)
07F9: D5 C1 F6  MOV   $F6C1+X,A     (Set Vibrato Cycle Counter)
07FC: F5 70 01  MOV   A,$0170+X     (A = Tremolo mode/amp)
07FF: F0 5C     BEQ   $085D         (If zero skip to updates and exit)
0801: C4 A2     MOV   $A2,A         ($A2 = Tremolo mode/amp)
0803: F5 31 01  MOV   A,$0131+X     (A = Tremolo Predelay Counter)
0806: D0 55     BNE   $085D         (If predelay active skip to updates and exit)
0808: F5 21 F8  MOV   A,$F821+X     (A = Tremolo Change Rate high)
080B: FD        MOV   Y,A           (Transfer A to Y)
080C: F5 20 F8  MOV   A,$F820+X     (A = Tremolo Change Rate low)
080F: DA C0     MOVW  $C0,YA        ($C0 = Tremolo Change Rate)
0811: CB C2     MOV   $C2,Y         ($C2 = Tremolo Change Rate high)
0813: F5 61 F8  MOV   A,$F861+X     (A = Tremolo Value high)
0816: FD        MOV   Y,A           (Transfer A to Y)
0817: F5 60 F8  MOV   A,$F860+X     (A = Tremolo Value low) 
081A: 7A C0     ADDW  YA,$C0        (Add Tremolo Change Rate)
081C: D5 60 F8  MOV   $F860+X,A     (Set Tremolo Value low)
081F: DD        MOV   A,Y           (Transfer Y to A)
0820: 75 61 F8  CMP   A,$F861+X     (Detect if Tremolo Value changed)
0823: F0 06     BEQ   $082B         (If no change skip 2 instructions)
0825: D5 61 F8  MOV   $F861+X,A     (Set Tremolo Value high)
0828: 09 8F DB  OR    ($DB),($8F)   (Enable Volume Update in DSP for Current Voice)
082B: F5 E1 F6  MOV   A,$F6E1+X     (A = Tremolo Cycle Counter)
082E: 9C        DEC   A             (Decrement A)
082F: D0 29     BNE   $085A         (If counting skip 18 instructions)
0831: F5 01 F8  MOV   A,$F801+X     (A = Tremolo Max Change Rate high)
0834: FD        MOV   Y,A           (Transfer A to Y)
0835: F5 00 F8  MOV   A,$F800+X     (A = Tremolo Max Change Rate low)
0838: DA 98     MOVW  $98,YA        ($98 = Tremolo Max Change Rate)
083A: F5 90 01  MOV   A,$0190+X     (A = Tremolo/Vibrato Gain Counter)
083D: C4 9B     MOV   $9B,A         (Set $9B)
083F: 38 07 9B  AND   $9B,#$07      ($9B = Vibrato Gain Counter)
0842: 9F        XCN   A             (Swap high 4 and low 4 bits)
0843: 28 07     AND   A,#$07        (A = Tremolo Gain Counter)
0845: 3F 61 09  CALL  $0961         (Process Change Rate with Mode and Gain Counter)
0848: D5 20 F8  MOV   $F820+X,A     (Set Tremolo Change Rate low)
084B: DD        MOV   A,Y           (Transfer Y to A)
084C: D5 21 F8  MOV   $F821+X,A     (Set Tremolo Change Rate high)
084F: E4 9A     MOV   A,$9A         (A = Tremolo Gain Counter)
0851: 9F        XCN   A             (Swap high 4 and low 4 bits)
0852: 04 9B     OR    A,$9B         (Join with Vibrato Gain Counter)
0854: D5 90 01  MOV   $0190+X,A     (Set Tremolo/Vibrato Gain Counter)
0857: F5 E0 F6  MOV   A,$F6E0+X     (A = Tremolo Cycle Duration)
085A: D5 E1 F6  MOV   $F6E1+X,A     (Set Tremolo Cycle Counter)
085D: BA DB     MOVW  YA,$DB        (YA = DSP Volume/Pitch Update bitmask)
085F: D0 01     BNE   $0862         (Branch if not 0, DSP Volume/Pitch Updates)
0861: 6F        RET                 (Return)

; Branch DSP Volume/Pitch Updates
0862: 7D        MOV   A,X           (Transfer X to A)
0863: 28 0F     AND   A,#$0F        (Mask #$0F)
0865: C4 98     MOV   $98,A         (..)
0867: E4 98     MOV   A,$98         (..)
0869: 9F        XCN   A             (Swap high 4 and low 4 bits)
086A: 5C        LSR   A             (Halve A)
086B: C4 99     MOV   $99,A         (Set DSP Register x0)
086D: E4 8F     MOV   A,$8F         (A = Current Voice)
086F: 24 DB     AND   A,$DB         (And Enable Volume Update in DSP)
0871: F0 06     BEQ   $0879         (if not skip 2 instructions)
0873: 4E DB 00  TCLR1 $00DB         (Test and clear Enable Volume Update in DSP)
0876: 3F 88 08  CALL  $0888         (DSP Volume Update)
0879: E4 8F     MOV   A,$8F         (A = Current Voice)
087B: 24 DC     AND   A,$DC         (And Enable Pitch Update in DSP)
087D: F0 08     BEQ   $0887         (If not exit)
087F: 4E DC 00  TCLR1 $00DC         (Test and clear Enable Pitch Update in DSP)
0882: 22 99     SET1  $99           (Set bit 1, DSP Register now x2)
0884: 3F 14 09  CALL  $0914         (DSP Pitch Update)
0887: 6F        RET                 (Return)

; DSP Volume Update
0888: 8F 80 9A  MOV   $9A,#$80      ($9A = #$80)
088B: 03 85 23  BBS0  $85,$08B1     (If mono mode skip 15 instructions)
088E: 43 85 20  BBS2  $85,$08B1     (??, this bit is never set)
0891: E4 8F     MOV   A,$8F         (A = Current Voice)
0893: 24 84     AND   A,$84         (And System SFX Voice)
0895: D0 1A     BNE   $08B1         (If voice is off then skip 12 instructions)
0897: F5 61 F6  MOV   A,$F661+X     (A = Pan high)
089A: FD        MOV   Y,A           (Transfer A to Y)
089B: C8 10     CMP   X,#$10        (X > #$10)
089D: 90 08     BCC   $08A7         (If not SFX skip 4 instructions)
089F: E4 B2     MOV   A,$B2         (A = SFX Pansweep Value high)
08A1: 48 80     EOR   A,#$80        (Invert Signature)
08A3: 3F D4 0F  CALL  $0FD4         (Calculate Pan with Pansweep)
08A6: FD        MOV   Y,A           (Y = Calculated SFX Pan)
08A7: F5 81 F8  MOV   A,$F881+X     (A = Pansweep Value high)
08AA: 3F D4 0F  CALL  $0FD4         (Calculate Pan with Pansweep)
08AD: 48 FF     EOR   A,#$FF        (Invert A)
08AF: C4 9A     MOV   $9A,A         ($9A = Calculated Pan)
08B1: F5 21 F6  MOV   A,$F621+X     (A = Voice Volume high)
08B4: FD        MOV   Y,A           (Transfer A to Y)
08B5: C4 9B     MOV   $9B,A         ($9B = Voice Volume high)
08B7: F5 61 F8  MOV   A,$F861+X     (A = Tremolo Value high)
08BA: F0 0C     BEQ   $08C8         (If zero skip 8 instructions)
08BC: 1C        ASL   A             (Double A)
08BD: CF        MUL   YA            (Tremolo * Volume)
08BE: B0 08     BCS   $08C8         (If carry skip 5 instructions)
08C0: DD        MOV   A,Y           (Transfer Y to A)
08C1: 84 9B     ADC   A,$9B         (Add Voice Volume)
08C3: 10 02     BPL   $08C7         (If less than #$80 skip next instruction)
08C5: E8 7F     MOV   A,#$7F        (A = #$7F)
08C7: FD        MOV   Y,A           (Transfer A to Y)
08C8: C8 10     CMP   X,#$10        (X > #$10)
08CA: B0 0D     BCS   $08D9         (If SFX skip 7 instructions)
08CC: E4 A6     MOV   A,$A6         (A = Master Volume high)
08CE: CF        MUL   YA            (Voice Volume wTremolo * Master Volume)
08CF: E4 8F     MOV   A,$8F         (A = Current Voice)
08D1: 24 61     AND   A,$61         (And Ignore Song Volume)
08D3: D0 11     BNE   $08E6         (If so skip 9 instructions) 
08D5: E4 51     MOV   A,$51         (A = Song Volume)
08D7: 2F 0C     BRA   $08E5         (Skip 6 instructions)
08D9: E4 8F     MOV   A,$8F         (A = Current Voice)
08DB: 24 84     AND   A,$84         (And System SFX Voices)
08DD: F0 04     BEQ   $08E3         (If not System SFX voice skip 2 instructions)
08DF: E8 FF     MOV   A,#$FF        (A = #$FF)
08E1: 2F 02     BRA   $08E5         (Skip next instruction)
08E3: E4 A8     MOV   A,$A8         (A = SFX Volume high)
08E5: CF        MUL   YA            (Calculated Volume * SFX Volume/Song Volume)
08E6: CB 9B     MOV   $9B,Y         ($9B = Calculated Volume)
08E8: E4 9A     MOV   A,$9A         (A = Calculated Pan)
08EA: FD        MOV   Y,A           (Transfer A to Y)
08EB: E4 9B     MOV   A,$9B         (A = Calculated Volume)
08ED: CF        MUL   YA            (Calculated * Calculated Pan)
08EE: E4 8F     MOV   A,$8F         (A = Current Voice)
08F0: 24 A4     AND   A,$A4         (And Muted Voices)
08F2: F0 02     BEQ   $08F6         (If current voice is not muted skip next instruction)
08F4: 8D 00     MOV   Y,#$00        (Zero Y)
08F6: DD        MOV   A,Y           (Transfer Y to A)
08F7: EB 98     MOV   Y,$98         (Y = Voice Pointer)
08F9: D6 C9 00  MOV   $00C9+Y,A     (Set Calculated Volume for Voice)
08FC: FD        MOV   Y,A           (Transfer it to Y)
08FD: E4 99     MOV   A,$99         (A = DSP Register)
08FF: C4 F2     MOV   $F2,A         (Set register address)
0901: 7E F3     CMP   Y,$F3         (New and current value are the same)
0903: F0 02     BEQ   $0907         (If so skip next instruction)
0905: CB F3     MOV   $F3,Y         (Write DSP Parameter)
0907: E4 9A     MOV   A,$9A         (A = Calculated Pan)
0909: 48 FF     EOR   A,#$FF        (Invert)
090B: EA 98 00  NOT1  $98,0         (Increment/Decrement Voice Pointer)
090E: AB 99     INC   $99           (Next register, x1)
0910: 33 99 D7  BBC1  $99,$08EA     (Loop for right channel)
0913: 6F        RET                 (Return)

; DSP Pitch Update
0914: F5 E1 F8  MOV   A,$F8E1+X     (A = Calculated Frequency Value high)
0917: FD        MOV   Y,A           (Transfer A to Y)
0918: F5 E0 F8  MOV   A,$F8E0+X     (A = Calculated Frequency Value low)
091B: DA 9A     MOVW  $9A,YA        ($9A = Calculated Frequency Value)
091D: F5 C1 F8  MOV   A,$F8C1+X     (A = Calculated Vibrato Value high)
0920: FD        MOV   Y,A           (Transfer A to Y)
0921: F5 C0 F8  MOV   A,$F8C0+X     (A = Calculated Vibrato Value low)
0924: 7A 9A     ADDW  YA,$9A        (Add Vibrato to Frequency)
0926: DA 9A     MOVW  $9A,YA        ($9A = Final Frequency Value)
0928: C8 10     CMP   X,#$10        (X < #$10)
092A: 90 04     BCC   $0930         (If not SFX skip 2 instructions)
092C: BA 9A     MOVW  YA,$9A        (YA = Final Frequency Value)
092E: 2F 1B     BRA   $094B         (Skip 20 instructions)
0930: E4 BC     MOV   A,$BC         (A = Master Pitch Multiplier high)
0932: 0D        PUSH  PSW           (Save Flags)
0933: 2D        PUSH  A             (Save A)
0934: CF        MUL   YA            (Final Frequency Value high * Master Pitch Multiplier high)
0935: DA 9C     MOVW  $9C,YA        ($9C = Shifted Final Frequency Value)
0937: AE        POP   A             (Restore A)
0938: EB 9A     MOV   Y,$9A         (Y = Final Frequency Value low)
093A: CF        MUL   YA            (Final Frequency Value low * Master Pitch Multiplier high)
093B: DD        MOV   A,Y           (Transfer Y to A)
093C: 8D 00     MOV   Y,#$00        (Zero Y)
093E: 7A 9C     ADDW  YA,$9C        (Add Shifted Final Frequency Value)
0940: 8E        POP   PSW           (Restore Flags)
0941: 30 08     BMI   $094B         (If negative skip 7 instructions)
0943: 1C        ASL   A             (Double A)
0944: 2D        PUSH  A             (Save A)
0945: DD        MOV   A,Y           (Transfer Y to A)
0946: 3C        ROL   A             (Double A with carry)
0947: FD        MOV   Y,A           (Transfer A to Y)
0948: AE        POP   A             (Restore A)
0949: 7A 9A     ADDW  YA,$9A        (Add Final Frequency Value)
094B: 4D        PUSH  X             (Save X)
094C: F8 99     MOV   X,$99         (X = DSP Register)
094E: D8 F2     MOV   $F2,X         (Set DSP Register)
0950: 64 F3     CMP   A,$F3         (Compare with current parameter)
0952: F0 02     BEQ   $0956         (If no change skip next instruction)
0954: C4 F3     MOV   $F3,A         (Write parameter)
0956: 3D        INC   X             (Next register address)
0957: D8 F2     MOV   $F2,X         (Set register address)
0959: 7E F3     CMP   Y,$F3         (Compare with current parameter)
095B: F0 02     BEQ   $095F         (If no change exit)
095D: CB F3     MOV   $F3,Y         (Write parameter)
095F: CE        POP   X             (Restore X)
0960: 6F        RET                 (Return)

; Process Change Rate with Mode and Gain Counter
;     A = Primary Gain Counter (to use)
;  +$98 = Max Change Rate
;   $9A = Primary Gain Counter (decremented by 1 to keep)
;   $9B = Secondary Gain Counter (to keep)
;   $A2 = mode/amplitude
;  +$C0 = Change Rate
;   $C2 = Change Rate (high byte, duplicate)
0961: 8F 00 9A  MOV   $9A,#$00      (Zero $9A)
0964: 78 C0 A2  CMP   $A2,#$C0      (Mode 3 Balanced) 
0967: B0 4B     BCS   $09B4         (If so skip to Mode 3)
0969: 78 80 A2  CMP   $A2,#$80      (Mode 2 Negative)
096C: B0 1F     BCS   $098D         (If so skip to Mode 2) 

; Mode 0/1 Positive
096E: 58 FF C0  EOR   $C0,#$FF      (Invert Change Rate low)
0971: 58 FF C1  EOR   $C1,#$FF      (Invert Change Rate high)
0974: 3A C0     INCW  $C0           (Increment Change Rate)
0976: FD        MOV   Y,A           (Y = Gain Counter)
0977: F0 65     BEQ   $09DE         (If zero then exit with YA as Inverted Change Rate)
0979: 9C        DEC   A             (Decrement A, Gain Counter)
097A: C4 9A     MOV   $9A,A         (Store Primary Gain Counter)
097C: E3 C1 5F  BBS7  $C1,$09DE     (If inversion is signed exit with YA as Inverted Change Rate)
097F: 4B 99     LSR   $99           (Halve Max Change Rate high)
0981: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
0983: 4B 99     LSR   $99           (Halve Max Change Rate high)
0985: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
0987: BA 98     MOVW  YA,$98        (YA = Halve Max Change Rate)
0989: 7A C0     ADDW  YA,$C0        (Add Inverted Change Rate)
098B: 2F 53     BRA   $09E0         (Exit)

; Mode 2 Negative
098D: 58 FF C0  EOR   $C0,#$FF      (Invert Change Rate low)
0990: 58 FF C1  EOR   $C1,#$FF      (Invert Change Rate high)
0993: 3A C0     INCW  $C0           (Increment Change Rate)
0995: FD        MOV   Y,A           (Y = Gain Counter)
0996: F0 46     BEQ   $09DE         (If zero then exit with YA as Inverted Change Rate)
0998: 9C        DEC   A             (Decrement A, Gain Counter)
0999: C4 9A     MOV   $9A,A         (Store Primary Gain Counter)
099B: F3 C1 40  BBC7  $C1,$09DE     (If inversion is unsigned exit with YA as Inverted Change Rate)
099E: 4B 99     LSR   $99           (Halve Max Change Rate high)
09A0: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
09A2: 4B 99     LSR   $99           (Halve Max Change Rate high)
09A4: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
09A6: 58 FF 98  EOR   $98,#$FF      (Invert Change Rate low)
09A9: 58 FF 99  EOR   $99,#$FF      (Invert Change Rate high)
09AC: 3A 98     INCW  $98           (Increment Change Rate)
09AE: BA 98     MOVW  YA,$98        (YA = Calculated Change Rate)
09B0: 7A C0     ADDW  YA,$C0        (Add Change Rate)
09B2: 2F 2C     BRA   $09E0         (Exit)

; Mode 3 Balanced
09B4: FD        MOV   Y,A           (Y = Gain Counter)
09B5: F0 1F     BEQ   $09D6         (If zero then exit with Inverted Change Rate as YA)
09B7: 9C        DEC   A             (Decrement A, Gain Counter)
09B8: C4 9A     MOV   $9A,A         (Store Primary Gain Counter)
09BA: F3 C1 08  BBC7  $C1,$09C5     (If signed skip 3 instructions)
09BD: 58 FF C0  EOR   $C0,#$FF      (Invert Change Rate low)
09C0: 58 FF C1  EOR   $C1,#$FF      (Invert Change Rate high)
09C3: 3A C0     INCW  $C0           (Increment Change Rate)
09C5: 4B 99     LSR   $99           (Halve Max Change Rate high)
09C7: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
09C9: 4B 99     LSR   $99           (Halve Max Change Rate high)
09CB: 6B 98     ROR   $98           (Halve Max Change Rate low with carry)
09CD: BA 98     MOVW  YA,$98        (YA = Halve Max Change Rate)
09CF: 7A C0     ADDW  YA,$C0        (Add Inverted Change Rate)
09D1: DA C0     MOVW  $C0,YA        (Set new Change Rate)
09D3: E3 C2 08  BBS7  $C2,$09DE     (If old Change Rate signed exit with YA as new Change Rate)
09D6: 58 FF C0  EOR   $C0,#$FF      (Invert Change Rate low)
09D9: 58 FF C1  EOR   $C1,#$FF      (Invert Change Rate high)
09DC: 3A C0     INCW  $C0           (Increment Change Rate)
09DE: BA C0     MOVW  YA,$C0        (YA = Change Rate)
09E0: 6F        RET                 (Return)

; Read Port-0 ($2140)
; Interrupts $10-$1F Song Loading
; Interrupts $20-$2F System Sound Effects
; Interrupts $80-$FF Various Commands 
09E1: F8 F4     MOV   X,$F4         (Port-0 $2140)
09E3: F0 35     BEQ   $0A1A         (Exit if 0)
09E5: F8 F4     MOV   X,$F4         (Port-0 $2140)
09E7: 3E F4     CMP   X,$F4         (Port-0 $2140)
09E9: D0 FA     BNE   $09E5         (Loop if not equal)
09EB: BA F6     MOVW  YA,$F6        (Port-2/3 $2142)
09ED: DA 8D     MOVW  $8D,YA        (Interrupt Command B2-B3)
09EF: BA F4     MOVW  YA,$F4        (Port-0/1 $2140)
09F1: DA 8B     MOVW  $8B,YA        (Interrupt Command B0-B1)
09F3: 3F 4D 06  CALL  $064D         (Enable all timers; reset input from ports 0 and 1)
09F6: C4 F4     MOV   $F4,A         (Port $2140)
09F8: 5D        MOV   X,A           (Transfer A to X)
09F9: 10 03     BPL   $09FE         (Skip next line if Port-0 < $80)
09FB: 5F 54 0C  JMP   $0C54         (Handle Port-0 high bit set)
09FE: C8 10     CMP   X,#$10        (Port-0 < $10)
0A00: 90 18     BCC   $0A1A         (Exit if so)
0A02: C8 20     CMP   X,#$20        (Port-0 > $20)
0A04: B0 0D     BCS   $0A13         (Handle Port-0 $20-$2F, System Sound Effects)
0A06: 28 0F     AND   A,#$0F        (A now 0-F) (we end up here for Port-0 $10-$1F)
0A08: 1C        ASL   A             (Double A)
0A09: FD        MOV   Y,A           (Transfer A to Y)
0A0A: F6 36 19  MOV   A,$1936+Y     (Pointer, high byte)
0A0D: 2D        PUSH  A             (Push on stack)
0A0E: F6 35 19  MOV   A,$1935+Y     (Pointer, low byte)
0A11: 2D        PUSH  A             (Push on stack)
0A12: 6F        RET                 (Return)

; Interrupts $20-$2F, System Sound Effects
0A13: C8 30     CMP   X,#$30        (Port-0 > $30)
0A15: B0 03     BCS   $0A1A         (Exit if so)
0A17: 5F F1 0B  JMP   $0BF1         (Play System Sound Effect)
0A1A: 6F        RET                 (Return)

; Interrupt $14: Pause and Play Song
0A1B: 3F 54 10  CALL  $1054         (Pause Current Song)

; Interrupt $10: Play Song
0A1E: 8F 10 C4  MOV   $C4,#$10      (Pointer to Song Start Offsets = #$10)
0A21: 2F 06     BRA   $0A29         (Branch to switch song)

; Interrupt $15: Pause and Play Song from Alternative Start
0A23: 3F 54 10  CALL  $1054         (Pause Current Song)

; Interrupt $11: Play Song from Alternative Start
0A26: 8F 20 C4  MOV   $C4,#$20      (Pointer to Song Start Offsets = #$20)
0A29: E8 FF     MOV   A,#$FF        (Parameter)
0A2B: 8D 5C     MOV   Y,#$5C        (Point to KOF register)
0A2D: 3F 48 06  CALL  $0648         (Mute all voices)
0A30: E4 76     MOV   A,$76         (Echo feedback) (Pointless?)
0A32: FA 8C C7  MOV   ($C7),($8C)   (Current Song Index = Interrupt Command b1)
0A35: E4 8D     MOV   A,$8D         (A = Interrupt command b2)
0A37: C4 A6     MOV   $A6,A         (Set Master Volume high)
0A39: 8F 00 AD  MOV   $AD,#$00      (Zero Master Volume Envelope Counter)
0A3C: 3F 38 0E  CALL  $0E38         (Interrupt $FE: Transfer Data from SCPU )
0A3F: E8 00     MOV   A,#$00        (Zero A)
0A41: FD        MOV   Y,A           (Zero Y)
0A42: DA 83     MOVW  $83,YA        (Zero Game and System SFX Voices)
0A44: B2 86     CLR5  $86           (Clear Fast Forward)
0A46: 72 85     CLR3  $85           (Clear Master Volume Envelope Output Mode)
0A48: DA D9     MOVW  $D9,YA        (Zero Paused Voices & Paused Game SFX)
0A4A: C4 DD     MOV   $DD,A         (Zero Enable Conditional Jump)
0A4C: 69 C7 C6  CMP   ($C6),($C7)   (Is Paused Song same as Current Song)
0A4F: D0 41     BNE   $0A92         (Skip if not)
0A51: 3F 95 10  CALL  $1095         (Transfer Paused Data back to Current Data)
0A54: E4 52     MOV   A,$52         (A = Enabled Voices)
0A56: F0 3A     BEQ   $0A92         (If none skip  instructions)
0A58: 38 E0 8A  AND   $8A,#$E0      (Reset Noise Generator Frequency)
0A5B: 09 62 8A  OR    ($8A),($62)   (Add Noise Clock Value)
0A5E: CD 00     MOV   X,#$00        (Zero X, First Voice Pointer)
0A60: 8F 01 8F  MOV   $8F,#$01      (Set Current Voice = 1)
0A63: BB 25     INC   $25+X         (Increment Note Duration Counter)
0A65: D8 A3     MOV   $A3,X         (Set Voice Pointer)
0A67: 3F 29 15  CALL  $1529         (Update DSP SRCN for Voice with Instrument)
0A6A: 7D        MOV   A,X           (Transfer X to A)
0A6B: 9F        XCN   A             (Swap high 4 and low 4 bits)
0A6C: 5C        LSR   A             (Halve A)
0A6D: FD        MOV   Y,A           (Transfer A to Y)
0A6E: E8 00     MOV   A,#$00        (Zero A)
0A70: 3F 48 06  CALL  $0648         (Mute left channel volume)
0A73: FC        INC   Y             (Increment Y, DSP Reg. x1)
0A74: 3F 48 06  CALL  $0648         (Mute right channel volume)
0A77: FC        INC   Y             (Increment Y, DSP Reg. x2)
0A78: CB 99     MOV   $99,Y         (Set DSP Register)
0A7A: 3F 14 09  CALL  $0914         (DSP Pitch Update)
0A7D: 3D        INC   X             (Increase X)
0A7E: 3D        INC   X             (Increase X, next Voice Pointer)
0A7F: 0B 8F     ASL   $8F           (Next voice)
0A81: D0 E0     BNE   $0A63         (Loop for all voices)
0A83: E8 00     MOV   A,#$00        (Zero A)
0A85: C4 54     MOV   $54,A         (Zero Enable Echo)
0A87: C4 56     MOV   $56,A         (Zero Enable Noise)
0A89: C4 58     MOV   $58,A         (Zero Enable Pitch Mod)
0A8B: FA 23 22  MOV   ($22),($23)   (Set key-on voices from Paused key-on voices)
0A8E: C4 24     MOV   $24,A         (Zero Key-Off Voices)
0A90: 2F 6A     BRA   $0AFC         (Skip  instructions)
0A92: E8 00     MOV   A,#$00        (Zero A)
0A94: FD        MOV   Y,A           (Zero Y)
0A95: C4 52     MOV   $52,A         (Zero Enabled Voices)
0A97: DA 53     MOVW  $53,YA        (Zero Enable Echo and Enable Echo SFX)
0A99: DA 55     MOVW  $55,YA        (Zero Enable Noise and Enable Noise SFX)
0A9B: DA 57     MOVW  $57,YA        (Zero Enable Pitch Mod and Enable Pitch Mod SFX)
0A9D: C4 22     MOV   $22,A         (Zero key-on voices)
0A9F: C4 24     MOV   $24,A         (Zero key-off voices)
0AA1: C4 23     MOV   $23,A         (Zero key-on voices for paused song)
0AA3: C4 59     MOV   $59,A         (Zero Disable Key Off at End of Note)
0AA5: C4 5B     MOV   $5B,A         (Zero Enable Slur)
0AA7: C4 5F     MOV   $5F,A         (Zero Enable Drum Roll)
0AA9: C4 61     MOV   $61,A         (Zero Ignore Song Volume)
0AAB: 8F 01 46  MOV   $46,#$01      (Current Tempo = 1)
0AAE: 8F FF 47  MOV   $47,#$FF      (Tempo Counter = $FF)
0AB1: 8F FF 51  MOV   $51,#$FF      (Song Volume = #$FF)
0AB4: C4 7B     MOV   $7B,A         (Echo Feedback Envelope Counter = 0)
0AB6: EB C4     MOV   Y,$C4         (Pointer to Voice Song Script Pointers)
0AB8: CD 10     MOV   X,#$10        (X = 16)
0ABA: F6 03 1C  MOV   A,$1C03+Y     (A = Voice Song Script Pointer)
0ABD: D4 01     MOV   $01+X,A       (Set Voice Song Script Pointer)
0ABF: DC        DEC   Y             (Decrement Y)
0AC0: 1D        DEC   X             (Decrement X)
0AC1: D0 F7     BNE   $0ABA         (Loop for 8 pointers, 2 bytes each)
0AC3: E5 00 1C  MOV   A,$1C00       (A = Size of Song Script low)
0AC6: C4 00     MOV   $00,A         (Store Size of Song Script low)
0AC8: E5 01 1C  MOV   A,$1C01       (A = Size of Song Script high)
0ACB: C4 01     MOV   $01,A         (Store Size of Song Script high)
0ACD: E8 24     MOV   A,#$24        (A = #$24)
0ACF: 8D 1C     MOV   Y,#$1C        (Y = #$1C)
0AD1: 9A 00     SUBW  YA,$00        ($1C24 - Size of Song Script)
0AD3: DA 00     MOVW  $00,YA        (Store calculated size)
0AD5: CD 0E     MOV   X,#$0E        (X = 13)
0AD7: 8F 80 8F  MOV   $8F,#$80      (Master Pitch Multiplier Envelops Counter = $80)
0ADA: E5 02 1C  MOV   A,$1C02       (A = Pointer to first song byte low)
0ADD: EC 03 1C  MOV   Y,$1C03       (Y = Pointer to first song byte high)
0AE0: DA 98     MOVW  $98,YA        ($98 = Pointer to first song byte)
0AE2: F4 02     MOV   A,$02+X       (Voice Script Pointer low)
0AE4: FB 03     MOV   Y,$03+X       (Voice Script Pointer high)
0AE6: 5A 98     CMPW  YA,$98        (Voice Script Pointer is First Song Byte)
0AE8: F0 0C     BEQ   $0AF6         (If so branch)
0AEA: 09 8F 52  OR    ($52),($8F)   (Enable Current Voice)
0AED: 7A 00     ADDW  YA,$00        (Add Song Script Offset)
0AEF: D4 02     MOV   $02+X,A       (Set Voice Script Pointer low)
0AF1: DB 03     MOV   $03+X,Y       (Set Voice Script Pointer high)
0AF3: 3F 12 0B  CALL  $0B12         (Zero Modulation Effects)
0AF6: 1D        DEC   X             (Decrement X)
0AF7: 1D        DEC   X             (Decrement X, next voice pointer)
0AF8: 4B 8F     LSR   $8F           (Next voice)
0AFA: D0 E6     BNE   $0AE2         (Loop 13)
0AFC: FA 53 87  MOV   ($87),($53)   (Set echo enabled voices)
0AFF: FA 55 88  MOV   ($88),($55)   (Set noise enabled voices)
0B02: FA 57 89  MOV   ($89),($57)   (Set pitch modulation enabled voices)
0B05: E8 00     MOV   A,#$00        (Zero A)
0B07: FD        MOV   Y,A           (Zero Y)
0B08: DA DB     MOVW  $DB,YA        (Clear pitch and volume updates in DSP)
0B0A: CD FF     MOV   X,#$FF        (Set X to #$FF)
0B0C: BD        MOV   SP,X          (Set stack pointer to $FF)
0B0D: E4 FD     MOV   A,$FD         (Counter-0; gets reset)
0B0F: 5F 72 02  JMP   $0272         (Jump to main loop)

; Zero Modulation Effects (Pansweep, Vibrato, Tremolo, Detune, Transposition)
0B12: 7D        MOV   A,X           (Transfer X to A)
0B13: 1C        ASL   A             (Double A)
0B14: D4 26     MOV   $26+X,A       (Store Pointer to Loop Count)
0B16: E8 00     MOV   A,#$00        (Zero A)
0B18: D5 50 01  MOV   $0150+X,A     (Zero Pitch Envelope Target)
0B1B: D5 80 F7  MOV   $F780+X,A     (Zero Pitch Envelope Change Rate low)
0B1E: D5 81 F7  MOV   $F781+X,A     (Zero Pitch Envelope Change Rate high)
0B21: D5 A0 F8  MOV   $F8A0+X,A     (Zero Pitch Envelope Change Rate fraction)
0B24: D5 51 01  MOV   $0151+X,A     (Zero Vibrato Amplitude)
0B27: D5 70 01  MOV   $0170+X,A     (Zero Tremolo Mode/Amplitude)
0B2A: D5 71 01  MOV   $0171+X,A     (Zero Pansweep)
0B2D: D5 80 F8  MOV   $F880+X,A     (Zero Pansweep Value low)
0B30: D5 81 F8  MOV   $F881+X,A     (Zero Pansweep Value high)
0B33: D5 60 F7  MOV   $F760+X,A     (Zero Detune)
0B36: D5 21 F7  MOV   $F721+X,A     (Zero Transposition)
0B39: BC        INC   A             (Increment A, 1)
0B3A: D4 25     MOV   $25+X,A       (Set Note Duration Counter)
0B3C: 6F        RET                 (Return)

; Interrupt $18: Game Sound Effect
0B3D: BA D9     MOVW  YA,$D9        (YA = Paused Voices bitmask)
0B3F: F0 01     BEQ   $0B42         (If no voices paused skip next instruction)
0B41: 6F        RET                 (Return)
0B42: FA 8C 90  MOV   ($90),($8C)   ($90 = SFX Index)
0B45: 8F 00 91  MOV   $91,#$00      ($91 = #$00)
0B48: 0B 90     ASL   $90           (Double $90)
0B4A: 2B 91     ROL   $91           (Double $91 with carry from $90)
0B4C: 0B 90     ASL   $90           (Double $90)
0B4E: 2B 91     ROL   $91           (Double $91 with carry from $90)
0B50: E8 00     MOV   A,#$00        (Zero A)
0B52: 8D 2C     MOV   Y,#$2C        (YA = #$2C00)
0B54: 7A 90     ADDW  YA,$90        (YA = #$2C00 + SFX Index Multiplied)
0B56: DA 90     MOVW  $90,YA        ($90 = Pointer to SFX Pointer)
0B58: CD 1E     MOV   X,#$1E        (X = #$1E, Pointer to last Voice)
0B5A: 8F 80 8F  MOV   $8F,#$80      (Current Voice = bit 7, last voice)
0B5D: E4 83     MOV   A,$83         (A = Game SFX voices bitmask)
0B5F: D0 04     BNE   $0B65         (If active skip 2 instructions)
0B61: E4 84     MOV   A,$84         (A = System SFX voices bitmask)
0B63: 48 F0     EOR   A,#$F0        (Invert high 4 bits)
0B65: C4 A1     MOV   $A1,A         (Set $A1)
0B67: E4 A1     MOV   A,$A1         (Reload A on loop)
0B69: 24 8F     AND   A,$8F         (Isolate Current Voice)
0B6B: D0 07     BNE   $0B74         (If active skip 4 instructions)
0B6D: 4B 8F     LSR   $8F           (Next voice)
0B6F: 1D        DEC   X             (Decrement X)
0B70: 1D        DEC   X             (Decrement X, next voice pointer)
0B71: B3 8F F3  BBC5  $8F,$0B67     (Loop for 2 voices)
0B74: 8D 03     MOV   Y,#$03        (Y = 3)
0B76: 8F 00 A1  MOV   $A1,#$00      ($A1 = 0)
0B79: F7 90     MOV   A,($90)+Y     (A = SFX Pointer high, voice B/A)
0B7B: F0 35     BEQ   $0BB2         (If zero skip  instructions)
0B7D: D4 03     MOV   $03+X,A       (Set Voice Script Pointer high)
0B7F: DC        DEC   Y             (Decrement Y)
0B80: F7 90     MOV   A,($90)+Y     (A = SFX Pointer low, voice B/A)
0B82: D4 02     MOV   $02+X,A       (Set Voice Script Pointer low)
0B84: 09 8F A1  OR    ($A1),($8F)   ()
0B87: 3F 12 0B  CALL  $0B12         (Zero Modulation Effects)
0B8A: BB 25     INC   $25+X         (Increment Note Duration Counter)
0B8C: E8 41     MOV   A,#$41        (A = #$41)
0B8E: D5 21 F6  MOV   $F621+X,A     (Voice Volume high = #$41)
0B91: E8 80     MOV   A,#$80        (A = #$80)
0B93: D5 61 F6  MOV   $F661+X,A     (Absolute Pitch = #$80)
0B96: E8 03     MOV   A,#$03        (A = #$03)
0B98: D5 00 F6  MOV   $F600+X,A     (Octave = #$03)
0B9B: E8 00     MOV   A,#$00        (Zero A)
0B9D: D5 A0 F6  MOV   $F6A0+X,A     (Volume Envelope Counter = 0)
0BA0: D5 A1 F6  MOV   $F6A1+X,A     (Pan Envelope Counter = 0)
0BA3: 6D        PUSH  Y             (Save Y)
0BA4: 3F 72 17  CALL  $1772         (Track Command $EB: End of Song Script)
0BA7: E8 04     MOV   A,#$04        (A = 4)
0BA9: 3F 02 15  CALL  $1502         (Track Command $DC: Set Instrument)
0BAC: EE        POP   Y             (Restore Y)
0BAD: 1D        DEC   X             (Decrement X)
0BAE: 1D        DEC   X             (Decrement X, next Voice Pointer)
0BAF: 4B 8F     LSR   $8F           (Next Voice)
0BB1: E8 DC     MOV   A,#$DC        (A = #$DC)
-> 0BB2: DC     DEC   Y             (Decrement Y, from branch at $0B7B)
0BB3: DC        DEC   Y             (Decrement Y)
0BB4: 10 C3     BPL   $0B79         (Loop for second SFX voice)
0BB6: E4 83     MOV   A,$83         (A = Game SFX Voices)
0BB8: 04 A1     OR    A,$A1         (with ?)
0BBA: 4E 22 00  TCLR1 $0022         (Clear Voice Key-On)
0BBD: 4E 5A 00  TCLR1 $005A         (Clear Disable Key-Off at End of Note)
0BC0: 4E 5C 00  TCLR1 $005C         (Clear Slur)
0BC3: 4E 60 00  TCLR1 $0060         (Clear Drum Roll)
0BC6: 0E 24 00  TSET1 $0024         (Mute voice)
0BC9: FA 83 A2  MOV   ($A2),($83)   (Set $A2 as Game SFX Voices)
0BCC: CD 1E     MOV   X,#$1E        (X = Voice Pointer for Last Voice)
0BCE: 8F 80 8F  MOV   $8F,#$80      (Set Current Voice to Last Voice) 
0BD1: 0B A2     ASL   $A2           (Shift Voices)
0BD3: 90 03     BCC   $0BD8         (If no carry skip next instruction)
0BD5: 3F 72 17  CALL  $1772         (Track Command $EB: End of Song Script)
0BD8: 1D        DEC   X             (Decrement X)
0BD9: 1D        DEC   X             (Decrement X, next Voice Pointer)
0BDA: 4B 8F     LSR   $8F           (Next voice)
0BDC: 73 8F F2  BBC3  $8F,$0BD1     (Loop for ?)
0BDF: E4 A1     MOV   A,$A1         
0BE1: C4 83     MOV   $83,A         (Set Game SFX Voices)
0BE3: 4E 87 00  TCLR1 $0087         (Disable echo for voice)
0BE6: 4E 89 00  TCLR1 $0089         (Disable pitch modulation for voice)
0BE9: 4E 88 00  TCLR1 $0088         (Disable noise for voice)
0BEC: E4 8D     MOV   A,$8D         (A = Interrupt command b2)
0BEE: C4 B2     MOV   $B2,A         (Set Sound Effect Pan high)
0BF0: 6F        RET                 (Return)

; Play System Sound Effect
0BF1: BA D9     MOVW  YA,$D9        (YA = Paused Voices and Paused SFX Voices)
0BF3: D0 5E     BNE   $0C53         (If paused voices exit)
0BF5: 7D        MOV   A,X           (Transfer X to A)
0BF6: 28 0F     AND   A,#$0F        (A = System SFX Index)
0BF8: 1C        ASL   A             (Double A)
0BF9: FD        MOV   Y,A           (Transfer A to Y)
0BFA: CD 20     MOV   X,#$20        (X = #$20)
0BFC: E4 83     MOV   A,$83         (A = Game SFX Voices)
0BFE: 04 84     OR    A,$84         (with System SFX Voices)
0C00: 28 F0     AND   A,#$F0        ()
0C02: 8F 80 8F  MOV   $8F,#$80      (Set Current Voice = bit 7, last voice)
0C05: 68 F0     CMP   A,#$F0        ()
0C07: F0 0C     BEQ   $0C15         (If so skip 7 instructions)
0C09: 1D        DEC   X             (Decrement X)
0C0A: 1D        DEC   X             (Decrement X, next Voice Pointer)
0C0B: 1C        ASL   A             (Shift SFX voices)
0C0C: 90 14     BCC   $0C22         (If not active skip 10 instructions)
0C0E: 4B 8F     LSR   $8F           (Next voice)
0C10: 73 8F F6  BBC3  $8F,$0C09     (Loop for ? voices)
0C13: 2F 0D     BRA   $0C22         (Skip 7 instructions)
0C15: 1D        DEC   X             (Decrement X)
0C16: 1D        DEC   X             (Decrement X)
0C17: E4 84     MOV   A,$84         (A = System SFX Voices)
0C19: 24 8F     AND   A,$8F         (Isolate Current Voice)
0C1B: D0 05     BNE   $0C22         (If used skip 2 instructions) 
0C1D: 4B 8F     LSR   $8F           (Next Voice)
0C1F: 73 8F F3  BBC3  $8F,$0C15     (Loop for ? voices)
0C22: F6 E0 17  MOV   A,$17E0+Y     (Pointer to System Sound Effect Script high)
0C25: F0 2C     BEQ   $0C53         (Exit if zero)
0C27: D4 03     MOV   $03+X,A       (Set Voice Script Pointer high)
0C29: F6 DF 17  MOV   A,$17DF+Y     (Pointer to System Sound Effect Script low)
0C2C: D4 02     MOV   $02+X,A       (Set Voice Script Pointer low)
0C2E: 3F 12 0B  CALL  $0B12         (Zero Modulation Effects)
0C31: BB 25     INC   $25+X         (Increment Note Duration Counter)
0C33: 3F 72 17  CALL  $1772         (Track Command $EB: End of Song Script)
0C36: E4 8F     MOV   A,$8F         (A = Current Voice)
0C38: 4E 5A 00  TCLR1 $005A         (Clear Disable Key-Off at End of Note SFX)
0C3B: 4E 5C 00  TCLR1 $005C         (Clear Enable Slur SFX)
0C3E: 4E 60 00  TCLR1 $0060         (Clear Enable Drum Roll SFX)
0C41: 0E 24 00  TSET1 $0024         (Mute voice)
0C44: 4E 22 00  TCLR1 $0022         (Clear voice key-on)
0C47: 4E 87 00  TCLR1 $0087         (Disable echo for voice)
0C4A: 4E 89 00  TCLR1 $0089         (Disable pitch modulation for voice)
0C4D: 4E 88 00  TCLR1 $0088         (Disable noise for voice)
0C50: 09 8F 84  OR    ($84),($8F)   (Set System SFX Voice for Current Voice)
0C53: 6F        RET                 (Return)

; Port-0 with high bit set has value of 0-$1F ($80-$8F and $F0-$FF)
0C54: C8 F0     CMP   X,#$F0        (Port-0 > $F0)
0C56: B0 04     BCS   $0C5C         (Skip 2 lines if so)
0C58: C8 90     CMP   X,#$90        (Port-0 > $90)
0C5A: B0 0D     BCS   $0C69         (Exit if so)
0C5C: 7D        MOV   A,X           (Transfer X to A)
0C5D: 28 1F     AND   A,#$1F        (A is 0-$1F)
0C5F: 1C        ASL   A             (Double it)
0C60: FD        MOV   Y,A           (Transfer A to Y)
0C61: F6 56 19  MOV   A,$1956+Y     (Pointer, high byte)
0C64: 2D        PUSH  A             (Push on stack)
0C65: F6 55 19  MOV   A,$1955+Y     (Pointer, low byte)
0C68: 2D        PUSH  A             (Push on stack)
0C69: 6F        RET                 (Return)

; Interrupts $80, $81, $82: Set master/sound effect volume to yy (w/ envelope xx)
0C6A: E4 8B     MOV   A,$8B         (A = interrupt command b0)
0C6C: 68 82     CMP   A,#$82        (A >= #$82)
0C6E: B0 06     BCS   $0C76         (If so skip 3 instructions)
0C70: EB 8D     MOV   Y,$8D         (Y = Interrupt command b2, Volume Value)
0C72: D0 02     BNE   $0C76         (If non-zero skip 1 instruction)
0C74: 80        SETC                (Set Carry)
0C75: 8D 60     MOV   Y,#$60        (Y = #$60)
-> 0C76: 60     CLRC                (Clear Carry, from above)
0C77: CA 85 60  MOV1  $85,3,C       (Enable/Disable Master Volume Envelope Output Mode)
0C7A: CD 00     MOV   X,#$00        (Zero X)
0C7C: 13 8B 03  BBC0  $8B,$0C82     (If Interrupt $80 or $82 skip 2 instructions)
0C7F: BC        INC   A             (Increment A, run once, no loop)
0C80: 2F 0D     BRA   $0C8F         (Skip 7 instructions)
0C82: 33 8B 05  BBC1  $8B,$0C8A     (If Interrupt $80 or $81 skip 3 instructions)
0C85: BC        INC   A             (Increment A, run once, no loop)
0C86: CD 02     MOV   X,#$02        (X = 2, Point to SFX Volume)
0C88: 2F 05     BRA   $0C8F         (Skip 3 instructions)
0C8A: AB 8B     INC   $8B           (Increment loop counter)
0C8C: 60        CLRC                (Clear Carry for addition)
0C8D: 88 03     ADC   A,#$03        (Add 3 to A, will now loop once for SFX)
0C8F: C4 98     MOV   $98,A         (Set $98 as loop end count)
0C91: EB 8D     MOV   Y,$8D         (Y = Interrupt command b2, Volume Value)
0C93: E4 8C     MOV   A,$8C         (A = Interrupt command b1, Envelope Duration)
0C95: D4 AD     MOV   $AD+X,A       (Set Master/SFX Envelope Counter)
0C97: D0 0A     BNE   $0CA3         (If envelope skip 5 instructions)
0C99: DB A6     MOV   $A6+X,Y       (Set Master/SFX Volume high)
0C9B: D4 A5     MOV   $A5+X,A       (Zero Master/SFX Volume low)
0C9D: D4 AA     MOV   $AA+X,A       (Zero Master/SFX Volume Envelope Change Rate high)
0C9F: D4 A9     MOV   $A9+X,A       (Zero Master/SFX Volume Envelope Change Rate low)
0CA1: 2F 13     BRA   $0CB6         (Skip 11 instructions)
0CA3: DD        MOV   A,Y           (A = new Volume high)
0CA4: 80        SETC                (Set Carry for subtraction)
0CA5: B4 A6     SBC   A,$A6+X       (Subtract old Master/SFX Volume high)
0CA7: F0 EC     BEQ   $0C95         (If no change set new Value and zero envelope)
0CA9: 4D        PUSH  X             (Save X)
0CAA: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
0CAD: CE        POP   X             (Restore X)
0CAE: D4 A9     MOV   $A9+X,A       (Set Master/SFX Volume Envelope Change Rate low)
0CB0: DB AA     MOV   $AA+X,Y       (Set Master/SFX Volume Envelope Change Rate high)
0CB2: E8 00     MOV   A,#$00        (Zero A)
0CB4: D4 A5     MOV   $A5+X,A       (Zero Master/SFX Envelope Data)
0CB6: AB 8B     INC   $8B           (Increment loop counter)
0CB8: 69 98 8B  CMP   ($8B),($98)   (Loop if Interrupt $80, Master and SFX)
0CBB: F0 04     BEQ   $0CC1         (Enable Volume Update and exit)
0CBD: 3D        INC   X             (Increment X)
0CBE: 3D        INC   X             (Increment X, next Byte Pointer)
0CBF: 2F D0     BRA   $0C91         (Loop)
0CC1: 8F FF DB  MOV   $DB,#$FF      (Enable Volume Update in DSP for all voices)
0CC4: 6F        RET                 (Return)

; Calculate Change Rate to YA
;   A = The distance to tavel (signed)
;   X = The number of steps to travel A's distance
;   Carry = Signature (set/clear, positive/negative)
0CC5: 0D        PUSH  PSW           (Save Flags)
0CC6: B0 03     BCS   $0CCB         (If positive skip 2 instructions)
0CC8: 48 FF     EOR   A,#$FF        (Invert A)
0CCA: BC        INC   A             (Increment A)
0CCB: F8 8C     MOV   X,$8C         (X = Interrupt command b1)
0CCD: 8D 00     MOV   Y,#$00        (Zero Y)
0CCF: 9E        DIV   YA,X          (YA / X => A)
0CD0: C4 C1     MOV   $C1,A         (Set Calculated Change Rate low)
0CD2: E8 00     MOV   A,#$00        (Zero A)
0CD4: 9E        DIV   YA,X          (YA / X => A)
0CD5: C4 C0     MOV   $C0,A         (Set Calculated Change Rate high)
0CD7: 8E        POP   PSW           (Restore Flags)
0CD8: B0 08     BCS   $0CE2         (If positive skip 3 instructions)
0CDA: 58 FF C0  EOR   $C0,#$FF      (Invert Calculated Change Rate low)
0CDD: 58 FF C1  EOR   $C1,#$FF      (Invert Calculated Change Rate high)
0CE0: 3A C0     INCW  $C0           (Increment Calculated Change Rate)
0CE2: BA C0     MOVW  YA,$C0        (YA = Calculated Change Rate)
0CE4: 6F        RET                 (Return)

; Interrupt $83: Set sound effect pan to yy (w/ envelope xx)
0CE5: EB 8D     MOV   Y,$8D         (Y = Interrupt command b2, Pan Value)
0CE7: E4 8C     MOV   A,$8C         (A = Interrupt command b1, Envelope Duration)
0CE9: C4 B5     MOV   $B5,A         (Set Sound Effect Pan Envelope Counter)
0CEB: D0 0A     BNE   $0CF7         (If envelope skip 5 instructions)
0CED: CB B2     MOV   $B2,Y         (Set Sound Effect Pan high)
0CEF: C4 B1     MOV   $B1,A         (Set Sound Effect Pan low)
0CF1: C4 B4     MOV   $B4,A         (Set SFX Pan Envelope Change Rate high)
0CF3: C4 B3     MOV   $B3,A         (Set SFX Pan Envelope Change Rate low)
0CF5: 2F 0E     BRA   $0D05         (Enable volume updates and exit)
0CF7: DD        MOV   A,Y           (A = new Sound Effect Pan high)
0CF8: 80        SETC                (Set Carry for subtraction)
0CF9: A4 B2     SBC   A,$B2         (Subtract old Sound Effect Pan high)
0CFB: F0 EC     BEQ   $0CE9         (If no change set Sound Effect Pan and zero envelope)
0CFD: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
0D00: DA B3     MOVW  $B3,YA        (Set Sound Effect Pan Envelope Change Rate)
0D02: 8F 00 B1  MOV   $B1,#$00      (Zero Sound Effect Pan)
0D05: 8F FF DB  MOV   $DB,#$FF      (Enable volume updates for all voices)
0D08: 6F        RET                 (Return)

; Interrupt $84: Set Tempo Ratio (yy = envelope duration, xx = tempo ratio, signed fraction)
0D09: EB 8D     MOV   Y,$8D         (Y = Interrupt command b2, Tempo Ratio)
0D0B: E4 8C     MOV   A,$8C         (A = Interrupt command b1, Envelope Duration)
0D0D: C4 BA     MOV   $BA,A         (Set Tempo Ratio Envelope Counter)
0D0F: D0 0A     BNE   $0D1B         (If envelope skip 5 instructions)
0D11: CB B7     MOV   $B7,Y         (Set Tempo Ratio high)
0D13: C4 B6     MOV   $B6,A         (Zero Tempo Ratio low)
0D15: C4 B9     MOV   $B9,A         (Zero Tempo Ratio Envelope Change Rate high)
0D17: C4 B8     MOV   $B8,A         (Zero Tempo Ratio Envelope Change Rate low)
0D19: 2F 16     BRA   $0D31         (Enable Pitch update and exit)
0D1B: FA B7 A2  MOV   ($A2),($B7)   (Set $A2 to old Tempo Ratio high)
0D1E: 58 80 A2  EOR   $A2,#$80      (Invert Signature)
0D21: DD        MOV   A,Y           (A = new Tempo Ratio high)
0D22: 48 80     EOR   A,#$80        (Invert Signature)
0D24: 80        SETC                (Set Carry for subtraction)
0D25: A4 A2     SBC   A,$A2         (Subtract old Tempo Ratio from new Tempo Ratio)
0D27: F0 E4     BEQ   $0D0D         (If no change set Tempo Ratio and zero Envelope)
0D29: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
0D2C: DA B8     MOVW  $B8,YA        (Set Tempo Ratio Envelope Change Rate)
0D2E: 8F 00 B6  MOV   $B6,#$00      (Zero Tempo Ratio low) 
0D31: 8F FF DC  MOV   $DC,#$FF      (Enable Pitch Update in DSP for all voices)
0D34: 6F        RET                 (Return)

; Interrupt $85: Change Pitch to yy (w/ envelope xx)
0D35: EB 8D     MOV   Y,$8D         (Y = interrupt command b2, Pitch Multiplier)
0D37: E4 8C     MOV   A,$8C         (A = interrupt command b1, Envelope Duration)
0D39: C4 BF     MOV   $BF,A         (Set Master Pitch Multiplier Envelope Counter)
0D3B: D0 0A     BNE   $0D47         (If envelope skip 5 instructions)
0D3D: CB BC     MOV   $BC,Y         (Set Master Pitch Multiplier high)
0D3F: C4 BB     MOV   $BB,A         (Zero Master Pitch Multiplier low)
0D41: C4 BE     MOV   $BE,A         (Zero Master Pitch Multiplier Change Rate high)
0D43: C4 BD     MOV   $BD,A         (Zero Master Pitch Multiplier Change Rate low)
0D45: 2F 16     BRA   $0D5D         (Skip 10 instructions)
0D47: FA BC A2  MOV   ($A2),($BC)   (Set $A2 to old Master Pitch Multiplier high)
0D4A: 58 80 A2  EOR   $A2,#$80      (Invert Signature)
0D4D: DD        MOV   A,Y           (A = new Master Pitch Multiplier high)
0D4E: 48 80     EOR   A,#$80        (Invert Signature)
0D50: 80        SETC                (Set Carry for subtraction)
0D51: A4 A2     SBC   A,$A2         (Subtract old Master Pitch Mul. from new Master Pitch Mul.)
0D53: F0 E4     BEQ   $0D39         (If no change set Master Pitch Mul. and zero change rate)
0D55: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
0D58: DA BD     MOVW  $BD,YA        (Set Master Pitch Multiplier Change Rate)
0D5A: 8F 00 BB  MOV   $BB,#$00      (Zero Master Pitch Multiplier)
0D5D: 8F FF DC  MOV   $DC,#$FF      (Enable Pitch Update in DSP for all voices)
0D60: 6F        RET                 (Return)

; Interrupt $F3: Enable/Disable Mono Mode
0D61: E4 8C     MOV   A,$8C         (A = interrupt command b1)
0D63: D0 04     BNE   $0D69         (If non-zero skip 2 instructions)
0D65: 12 85     CLR0  $85           (Disable Mono Mode)
0D67: 2F 02     BRA   $0D6B         (Skip next instruction)
0D69: 02 85     SET0  $85           (Enable Mono Mode)
0D6B: 8F FF DB  MOV   $DB,#$FF      (Enable Volume Update in DSP for all voices)
0D6E: 6F        RET                 (Return)

; Interrupt $F0, $F1, $F2: Stop song & sound effect
0D6F: 23 8B 2D  BBS1  $8B,$0D9F     (If $F2, skip 20 instructions)
0D72: E4 83     MOV   A,$83         (A = Game Sound Effect Voices Bitmask)
0D74: 04 84     OR    A,$84         (with System Sound Effect Voices Bitmask)
0D76: 48 FF     EOR   A,#$FF        (Invert A)
0D78: 0E 24 00  TSET1 $0024         (Mute voice)
0D7B: 4E 22 00  TCLR1 $0022         (Clear voice key-on)
0D7E: 4E 87 00  TCLR1 $0087         (Disable echo for voice)
0D81: 4E 89 00  TCLR1 $0089         (Disable pitch modulation for voice)
0D84: 4E 88 00  TCLR1 $0088         (Disable noise for voice)
0D87: E8 00     MOV   A,#$00        (Zero A)
0D89: C4 52     MOV   $52,A         (Zero Enabled Voices Bitmask)
0D8B: C4 D9     MOV   $D9,A         (Zero Paused Voices Bitmask)
0D8D: C4 53     MOV   $53,A         (Zero Enable Echo Bitmask)
0D8F: C4 57     MOV   $57,A         (Zero Enable Pitch Mod Bitmask)
0D91: C4 55     MOV   $55,A         (Zero Enable Noise Bitmask)
0D93: C4 A0     MOV   $A0,A         (Zero Active Voices)
0D95: 9C        DEC   A             (A = #$FF)
0D96: C4 C6     MOV   $C6,A         (Reset Paused Song)
0D98: C4 C7     MOV   $C7,A         (Reset Current Song)
0D9A: 72 85     CLR3  $85           (Clear Master Volume Envelope Output Mode)
0D9C: 03 8B 23  BBS0  $8B,$0DC2     (If Interrupt $F1, exit)
0D9F: E4 83     MOV   A,$83         (A = Game Sound Effect Voices bitmask)
0DA1: 0E 24 00  TSET1 $0024         (Mute voice)
0DA4: 4E 22 00  TCLR1 $0022         (Clear Key-On Bitmask)
0DA7: 4E DB 00  TCLR1 $00DB         (Clear Enable Volume Update in DSP Bitmask)
0DAA: 4E DC 00  TCLR1 $00DC         (Clear Enable Pitch Update in DSP Bitmask)
0DAD: C4 A1     MOV   $A1,A         (Set Game SFX Voices bitmask)
0DAF: CD 1E     MOV   X,#$1E        (X = #$1E)
0DB1: 8F 80 8F  MOV   $8F,#$80      (Bitmask for current voice)
0DB4: 0B A1     ASL   $A1           (Push current voice from bitmask to carry)
0DB6: 90 03     BCC   $0DBB         (If no carry, skip next instruction)
0DB8: 3F 72 17  CALL  $1772         (Track Command $EB: End of Song Script)
0DBB: 1D        DEC   X             (Decrement X)
0DBC: 1D        DEC   X             (Decrement X)
0DBD: 4B 8F     LSR   $8F           (Next Voice)
0DBF: 73 8F F2  BBC3  $8F,$0DB4     (Loop for all voices)
0DC2: 6F        RET                 (Return)

; Interrupt $F4: Mute Voices (x: voices to mute, bitmask)
0DC3: FA 8C A4  MOV   ($A4),($8C)   (Muted Voices from interrupt b1)
0DC6: 8F FF DB  MOV   $DB,#$FF      (Enable volume update in DSP for all voices)
0DC9: 6F        RET                 (Return)

; Interrupt $F5: Pause/Unpause music (0 = unpause, 1 = pause)
0DCA: E4 8C     MOV   A,$8C         (interrupt command b1)
0DCC: F0 48     BEQ   $0E16         (If zero, Unpause)
0DCE: 8D 05     MOV   Y,#$05        (Y = $05)
0DD0: CB F2     MOV   $F2,Y         (Voice ADSR register address)
0DD2: E4 F3     MOV   A,$F3         (A = Current Data)
0DD4: 28 7F     AND   A,#$7F        (Remove high bit)
0DD6: C4 F3     MOV   $F3,A         (Store Data)
0DD8: DD        MOV   A,Y           (Transfer Y to A)
0DD9: 60        CLRC                (Clear Carry for addition)
0DDA: 88 10     ADC   A,#$10        (Next voice)
0DDC: FD        MOV   Y,A           (Transfer A to Y)
0DDD: 10 F1     BPL   $0DD0         (Loop unless 8 voices done)
0DDF: CD 00     MOV   X,#$00        (Zero X)
0DE1: 8D 00     MOV   Y,#$00        (Zero Y)
0DE3: CB F2     MOV   $F2,Y         (Voice Volume Left register address)
0DE5: D8 F3     MOV   $F3,X         (Store Zero)
0DE7: FC        INC   Y             (Next register)
0DE8: CB F2     MOV   $F2,Y         (Voice Volume Right register address)
0DEA: D8 F3     MOV   $F3,X         (Store Zero)
0DEC: DD        MOV   A,Y           (Transfer Y to A)
0DED: 60        CLRC                (Clear Carry for addition)
0DEE: 88 0F     ADC   A,#$0F        (Point to next voice)
0DF0: FD        MOV   Y,A           (Transfer A to Y)
0DF1: 10 F0     BPL   $0DE3         (Loop unless 8 voices done)
0DF3: FA 52 98  MOV   ($98),($52)   (Enabled Voices Bitmask)
0DF6: FA 83 99  MOV   ($99),($83)   (Game Sound Effect Voices Bitmask)
0DF9: BA 98     MOVW  YA,$98        (YA = Active Voices Word)
0DFB: F0 0A     BEQ   $0E07         (Skip 6 instructions if no voices active) 
0DFD: DA D9     MOVW  $D9,YA        (Set Paused Voices Bitmask)
0DFF: E8 00     MOV   A,#$00        (Zero A)
0E01: C4 52     MOV   $52,A         (Zero Enabled Voices Bitmask)
0E03: C4 83     MOV   $83,A         (Zero Game Sound Effect Voices Bitmask)
0E05: C4 DB     MOV   $DB,A         (Zero Enable Volume Update in DSP Bitmask)
0E07: C4 22     MOV   $22,A         (Zerp Key-On Voices)
0E09: 8D 10     MOV   Y,#$10        (Y = 16)
0E0B: D6 C8 00  MOV   $00C8+Y,A     (Zero Calculated Volume for Voice)
0E0E: FE FB     DBNZ  Y,$0E0B       (Decrease Y, loop for 8 voices 2 bytes each)
0E10: CD FF     MOV   X,#$FF        (Set X to #$FF)
0E12: BD        MOV   SP,X          (Set stack pointer to $FF)
0E13: 5F 72 02  JMP   $0272         (Jump to main loop)

; Unpause Music
0E16: 8D 05     MOV   Y,#$05        (Y = 5, DSP ADSR ch0)
0E18: CB F2     MOV   $F2,Y         (Set register address)
0E1A: E4 F3     MOV   A,$F3         (Current setting)
0E1C: 08 80     OR    A,#$80        (Enable ADSR)
0E1E: C4 F3     MOV   $F3,A         (Save changes)
0E20: DD        MOV   A,Y           (Transfer Y to A)
0E21: 60        CLRC                (Clear Carry for addition)
0E22: 88 10     ADC   A,#$10        (Point to next voice)
0E24: FD        MOV   Y,A           (Transfer A to Y)
0E25: 10 F1     BPL   $0E18         (Loop unless 8 voices done)
0E27: BA D9     MOVW  YA,$D9        (YA = Paused Voices and SFX Paused Voices)
0E29: F0 0C     BEQ   $0E37         (Exit if no voices paused)
0E2B: 8F FF DB  MOV   $DB,#$FF      (Enable volume update in DSP for all voices)
0E2E: C4 52     MOV   $52,A         (Set Enabled Voices)
0E30: CB 83     MOV   $83,Y         (Set Game Sound Effect Voices)
0E32: E8 00     MOV   A,#$00        (Zero A)
0E34: FD        MOV   Y,A           (Zero Y)
0E35: DA D9     MOVW  $D9,YA        (Zero Paused Voices and SFX Paused Voices)
0E37: 6F        RET                 (Return)

; Interrupt $FE: Transfer Data from SCPU
;   Parameter 00: no transfer
;   Parameter 01: transfer one byte at a time
;   Parameter 02: transfer two bytes at a time
;   Parameter 03: transfer three bytes at a time
;   Parameter 07: move chunk
;   Parameter F0: stop transfer
0E38: F8 F4     MOV   X,$F4         (Port $2140)
0E3A: F0 FC     BEQ   $0E38         (Loop until $2140 has value)
0E3C: 3E F4     CMP   X,$F4         (Port $2140)
0E3E: D0 F8     BNE   $0E38         (Loop unless value is consistent)
0E40: E4 F5     MOV   A,$F5         (Port $2141)
0E42: 68 F0     CMP   A,#$F0        (Is #$F0)
0E44: F0 2B     BEQ   $0E71         (If so push back to $2140 and continue)
0E46: C4 F5     MOV   $F5,A         (Set Port $2141)
0E48: 28 07     AND   A,#$07        (Parameter 0-7)
0E4A: 1C        ASL   A             (Double A)
0E4B: 2D        PUSH  A             (Save A)
0E4C: BA F6     MOVW  YA,$F6        (Port $2142 and $2143)
0E4E: DA 90     MOVW  $90,YA        (Set $90, Write Address)
0E50: AE        POP   A             (Restore A)
0E51: AD 1A     CMP   Y,#$1A        (Port $2143 > #$1A)
0E53: 90 04     BCC   $0E59         (If so skip 2 instructions)
0E55: AD F5     CMP   Y,#$F5        (Port $2143 > #$F5)
0E57: 90 02     BCC   $0E5B         (If so skip next instruction)
0E59: E8 00     MOV   A,#$00        (Zero A)
0E5B: D8 F4     MOV   $F4,X         (Set Port $2140)
0E5D: FD        MOV   Y,A           (Transfer A to Y)
0E5E: F6 A0 11  MOV   A,$11A0+Y     (A = Pointer high)
0E61: 2D        PUSH  A             (Save A)
0E62: F6 9F 11  MOV   A,$119F+Y     (A = Pointer low)
0E65: 2D        PUSH  A             (Save A)
0E66: 3E F4     CMP   X,$F4         (Port $2140)
0E68: F0 FC     BEQ   $0E66         (Loop until $2140 has value)
0E6A: F8 F4     MOV   X,$F4         (Port $2140)
0E6C: 3E F4     CMP   X,$F4         (Port $2140)
0E6E: D0 FA     BNE   $0E6A         (Loop until $2140 has cleared)
0E70: 6F        RET                 (Return)
0E71: D8 F4     MOV   $F4,X         (Set Port $2140)
0E73: 5F 4D 06  JMP   $064D         (Enable all timers; reset input from ports 0 and 1)

; Interrupt $FE/$03: Transfer three bytes at a time
0E76: 8D 00     MOV   Y,#$00        (Zero Y)
0E78: E4 F5     MOV   A,$F5         (A = Port-1 $2141)
0E7A: D7 90     MOV   ($90)+Y,A     (Set 1st transfer byte)
0E7C: D8 F4     MOV   $F4,X         (Set Port-0, $2140)
0E7E: FC        INC   Y             (Invrement Y)
0E7F: E4 F6     MOV   A,$F6         (A = Port-2 $2142)
0E81: D7 90     MOV   ($90)+Y,A     (Set 2nd transfer byte)
0E83: FC        INC   Y             (Increment Y)
0E84: E4 F7     MOV   A,$F7         (A = Port-3 $2143)
0E86: D7 90     MOV   ($90)+Y,A     (Set 3rd transfer byte)
0E88: 60        CLRC                (Clear Carry for addition)
0E89: 98 03 90  ADC   $90,#$03      (Increment Write Address by 3)
0E8C: 98 00 91  ADC   $91,#$00      (Apply Carry)
0E8F: 78 F5 91  CMP   $91,#$F5      (Reached Address $F500)
0E92: F0 7F     BEQ   $0F13         (If so goto Interrupt $FE/$00: No Transfer)
0E94: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0E96: F0 FC     BEQ   $0E94         (Loop until $2140 has value)
0E98: F8 F4     MOV   X,$F4         (X = Port-0 $2140)
0E9A: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0E9C: D0 FA     BNE   $0E98         (Loop until $2140 is consistent)
0E9E: E8 FF     MOV   A,#$FF        (A = #$FF, Reset Code)
0EA0: 8D F0     MOV   Y,#$F0        (Y = #$F0, Stop Transfer)
0EA2: 7E F4     CMP   Y,$F4         (Is Port-0 $2140 equal to #$F0, Stop Transfer)
0EA4: F0 09     BEQ   $0EAF         (If stop transfer loop for next param)
0EA6: 5A F4     CMPW  YA,$F4        (Compare #$FF/#$F0 to Port-0/1 $2140 and $2141)
0EA8: D0 CC     BNE   $0E76         (Loop if not)
0EAA: CB 8C     MOV   $8C,Y         (Set Interrupt command b1 to #$F0)
0EAC: 5F A3 0F  JMP   $0FA3         (Interrupt $FF/$F0: Reset SPC)
0EAF: 5F 40 0E  JMP   $0E40         (Loop for next parameter)

; Interrupt $FE/$02: Transfer two bytes at a time
0EB2: 8D 00     MOV   Y,#$00        (Zero Y)
0EB4: E4 F6     MOV   A,$F6         (Port $2142)
0EB6: D7 90     MOV   ($90)+Y,A     (Set 1st transfer byte)
0EB8: D8 F4     MOV   $F4,X         (Port $2140)
0EBA: FC        INC   Y             (Increment Y, next transfer pointer)
0EBB: E4 F7     MOV   A,$F7         (Port $2143)
0EBD: D7 90     MOV   ($90)+Y,A     (Set 2nd transfer byte)
0EBF: 3A 90     INCW  $90           (Increment Write Address)
0EC1: 3A 90     INCW  $90           (Increment Write Address)
0EC3: 78 F5 91  CMP   $91,#$F5      (Reached Address $F500)
0EC6: F0 4B     BEQ   $0F13         (If so goto Interrupt $FE/$00: No Transfer)
0EC8: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0ECA: F0 FC     BEQ   $0EC8         (Loop until $2140 has value)
0ECC: F8 F4     MOV   X,$F4         (X = Port-0 $2140)
0ECE: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0ED0: D0 FA     BNE   $0ECC         (Loop until $2140 is consistent)
0ED2: E8 FF     MOV   A,#$FF        (A = #$FF, Reset Code)
0ED4: 8D F0     MOV   Y,#$F0        (Y = #$F0, Stop Transfer)
0ED6: 7E F4     CMP   Y,$F4         (Is Port-0 $2140 equal to #$F0, Stop Transfer)
0ED8: F0 09     BEQ   $0EE3         (If stop transfer loop for next param)
0EDA: 5A F4     CMPW  YA,$F4        (Compare #$FF/#$F0 to Port-0/1 $2140 and $2141)
0EDC: D0 D4     BNE   $0EB2         (Loop if not)
0EDE: CB 8C     MOV   $8C,Y         (Set Interrupt command b1 to #$F0)
0EE0: 5F A3 0F  JMP   $0FA3         (Interrupt $FF/$F0: Reset SPC)
0EE3: 5F 40 0E  JMP   $0E40         (Loop for next parameter)

; Interrupt $FE/$01: Transfer one byte at a time
0EE6: 8D 00     MOV   Y,#$00        (Zero Y)
0EE8: D8 F4     MOV   $F4,X         (Set Port-0 $2140)
0EEA: E4 F7     MOV   A,$F7         (A = Port-3 $2143)
0EEC: D7 90     MOV   ($90)+Y,A     (Set transfer byte value)
0EEE: 3A 90     INCW  $90           (Increment Write Address)
0EF0: 78 F5 91  CMP   $91,#$F5      (Reached Address $F500)
0EF3: F0 1E     BEQ   $0F13         (If so goto Interrupt $FE/$00: No Transfer)
0EF5: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0EF7: F0 FC     BEQ   $0EF5         (Loop until $2140 has value)
0EF9: F8 F4     MOV   X,$F4         (X = Port-0 $2140)
0EFB: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0EFD: D0 FA     BNE   $0EF9         (Loop until $2140 is consistent)
0EFF: E8 FF     MOV   A,#$FF        (A = #$FF, Reset Code)
0F01: 8D F0     MOV   Y,#$F0        (Y = #$F0, Stop Transfer)
0F03: 7E F4     CMP   Y,$F4         (Is Port-0 $2140 equal to #$F0, Stop Transfer)
0F05: F0 09     BEQ   $0F10         (If stop transfer loop for next param)
0F07: 5A F4     CMPW  YA,$F4        (Compare #$FF/#$F0 to Port-0/1 $2140 and $2141)
0F09: D0 DB     BNE   $0EE6         (Loop if not)
0F0B: CB 8C     MOV   $8C,Y         (Set Interrupt command b1 to #$F0)
0F0D: 5F A3 0F  JMP   $0FA3         (Interrupt $FF/$F0: Reset SPC)
0F10: 5F 40 0E  JMP   $0E40         (Loop for next parameter)

; Interrupt $FE/$00: No Transfer
0F13: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0F15: F0 FC     BEQ   $0F13         (Loop until $2140 has new value)
0F17: F8 F4     MOV   X,$F4         (X = Port-0 $2140)
0F19: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0F1B: D0 FA     BNE   $0F17         (Loop until $2140 is consistent)
0F1D: E8 FF     MOV   A,#$FF        (A = #$FF, Reset Code)
0F1F: 8D F0     MOV   Y,#$F0        (Y = #$F0, Stop Transfer)
0F21: 7E F4     CMP   Y,$F4         (Is Port-0 $2140 equal to #$F0, Stop Transfer)
0F23: F0 09     BEQ   $0F2E         (If stop transfer loop for next param)
0F25: 5A F4     CMPW  YA,$F4        (Compare #$FF/#$F0 to Port-0/1 $2140 and $2141)
0F27: D0 EA     BNE   $0F13         (Loop if not)
0F29: CB 8C     MOV   $8C,Y         (Set Interrupt command b1 to #$F0)
0F2B: 5F A3 0F  JMP   $0FA3         (Interrupt $FF/$F0: Reset SPC)
0F2E: 5F 40 0E  JMP   $0E40         (Loop for next parameter)

; Interrupt $FE/$07: Move chunk
;   This command duplicates a chunk in SPC RAM from one address to another.
;   This is a form of look back decompression.
0F31: BA F6     MOVW  YA,$F6        (YA = Port-2/3 $2142 and $2143)
0F33: DA 92     MOVW  $92,YA        (Set $92, Write Address)
0F35: D8 F4     MOV   $F4,X         (Set Port-0 $2140)
0F37: 3F 64 0F  CALL  $0F64         (Check for stop transfer)
0F3A: BA F6     MOVW  YA,$F6        (YA = Port-2/3 $2142 and $2143)
0F3C: DA 98     MOVW  $98,YA        (Set $98, Chunk Size)
0F3E: D8 F4     MOV   $F4,X         (Set Port-0 $2140)
0F40: 8D 00     MOV   Y,#$00        (Zero Y)
0F42: F7 90     MOV   A,($90)+Y     (A = Byte from Read Address)
0F44: D7 92     MOV   ($92)+Y,A     (Set Byte at Write Address)
0F46: FC        INC   Y             (Increment Y)
0F47: D0 04     BNE   $0F4D         (If not zero skip 2 instructions)
0F49: AB 91     INC   $91           (Increment Read Address high)
0F4B: AB 93     INC   $93           (Increment Write Address high)
0F4D: 1A 98     DECW  $98           (Decrement chunk size)
0F4F: D0 F1     BNE   $0F42         (Loop while chunk size)
0F51: 3F 64 0F  CALL  $0F64         (Check for stop transfer)
0F54: B0 0B     BCS   $0F61         (If stop transfer loop for next param)
0F56: BA F6     MOVW  YA,$F6        (YA = Port-2/3 $2142 and $2143)
0F58: DA 90     MOVW  $90,YA        (Set Read Address)
0F5A: D8 F4     MOV   $F4,X         (Set Port-0 $2140)
0F5C: 3F 64 0F  CALL  $0F64         (Check for stop transfer)
0F5F: 2F D0     BRA   $0F31         (Loop)
0F61: 5F 40 0E  JMP   $0E40         (Loop for next parameter)

; Check for stop transfer (#$F0)
;   Returns Carry Set/Clear (Stop/Continue)
0F64: E8 FF     MOV   A,#$FF        (A = #$FF, Reset Code)
0F66: 8D F0     MOV   Y,#$F0        (Y = #$F0, Stop Transfer)
0F68: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0F6A: F0 FC     BEQ   $0F68         (Loop until $2140 has new value)
0F6C: F8 F4     MOV   X,$F4         (X = Port-0 $2140)
0F6E: 3E F4     CMP   X,$F4         (Compare Port-0 $2140)
0F70: D0 FA     BNE   $0F6C         (Loop until $2140 consistent)
0F72: 7E F4     CMP   Y,$F4         (Is Port-0 $2140 equal to #$F0, Stop Transfer)
0F74: F0 09     BEQ   $0F7F         (If so skip 4 instructions, set carry and exit)
0F76: 5A F4     CMPW  YA,$F4        (Compare #$FF/#$F0 to Port-0/1 $2140 and $2141)
0F78: D0 07     BNE   $0F81         (If not clear carry and exit)
0F7A: CB 8C     MOV   $8C,Y         (Set Interrupt Command b1 to #$F0)
0F7C: 5F A3 0F  JMP   $0FA3         (Interrupt $FF/$F0: Reset SPC)
0F7F: 80        SETC                (Set Carry)
0F80: 8D 60     MOV   Y,#$60        (Y = #$60)
-> 0F81: 60     CLRC                (Clear Carry, from branch at $0F78)
0F82: 6F        RET                 (Return)

; Interrupt $F6: Enable/Disable Fast Forward (0 = disable, 1 = enable)
0F83: E4 8C     MOV   A,$8C         (A = Interrupt command b1)
0F85: 60        CLRC                (Clear Carry for addition)
0F86: 88 FF     ADC   A,#$FF        (Set Carry for non-zero)
0F88: CA 86 A0  MOV1  $86,5,C       (Enable/Disable Fast Forward bit)
0F8B: B0 04     BCS   $0F91         (If carry skip 2 instructions)
0F8D: E8 27     MOV   A,#$27        (Timer0 target: 39) (4.875ms)
0F8F: 2F 02     BRA   $0F93         (Skip next instruction)
0F91: E8 01     MOV   A,#$01        (Timer0 target: 1) (0.125ms)
0F93: 8F 06 F1  MOV   $F1,#$06      (Enable timers 2 and 3)
0F96: C4 FA     MOV   $FA,A         (Set timer0 target)
0F98: 8F 07 F1  MOV   $F1,#$07      (Enable all 3 timers)
0F9B: 6F        RET                 (Return)

; Interrupt $89: Enable Conditional Jump (used by Phantom Train and Dancing Mad)
0F9C: FA 52 DD  MOV   ($DD),($52)   (Enabled Voices pushed to Enable Conditional Jump)
0F9F: FA 52 F6  MOV   ($F6),($52)   (Enabled Voices pushed to Port $2142)
0FA2: 6F        RET                 (Return)

; Interrupt $FF: Reset Codes
;   $FF/$01 = enable waveform output mode
;   $FF/$02 = disable echo
;   $FF/$F0 = reset spc

; Interrupt $FF/$01: Enable waveform output mode
0FA3: E4 8C     MOV   A,$8C         (A = interrupt command b1)
0FA5: 68 01     CMP   A,#$01        (Is #$01)
0FA7: D0 0A     BNE   $0FB3         (Skip 5 instructions if not)
0FA9: E4 8D     MOV   A,$8D         (A = interrupt command b2)
0FAB: 60        CLRC                (Clear Carry for addition)
0FAC: 88 FF     ADC   A,#$FF        (Trigger Carry unless zero)
0FAE: CA 86 E0  MOV1  $86,7,C       (Set $86 bit 7, enable waveform output mode)
0FB1: 2F 1F     BRA   $0FD2         (Exit) (RET...)

; Interrupt $FF/$02: Disable Echo
0FB3: 68 02     CMP   A,#$02        (Is #$02)
0FB5: D0 0A     BNE   $0FC1         (Skip 5 instructions if not)
0FB7: E4 8D     MOV   A,$8D         (A = interrupt command b2)
0FB9: 60        CLRC                (Clear Carry for addition)
0FBA: 88 FF     ADC   A,#$FF        (Trigger Carry unless zero)
0FBC: CA 86 C0  MOV1  $86,6,C       (Set $86 bit 6, disable echo)
0FBF: 2F 11     BRA   $0FD2         (Exit) (RET...)

; Interrupt $FF/$F0: Reset SPC
0FC1: 68 F0     CMP   A,#$F0        (Is #$F0)
0FC3: D0 0D     BNE   $0FD2         (Exit if not)
0FC5: E8 E0     MOV   A,#$E0        (Parameter: RESET, MUTE, ECEN are set)
0FC7: 8D 6C     MOV   Y,#$6C        (Point to DSP Flags register)
0FC9: 3F 48 06  CALL  $0648         (Set Register to Parameter)
0FCC: 8F 80 F1  MOV   $F1,#$80      (Set Control Register, Reset Ports and Stop Timers)
0FCF: 5F C0 FF  JMP   $FFC0         (SPC Initialization)
0FD2: 6F        RET                 (Return)

; Return (void pointer)
0FD3: 6F        RET                 (Return)

; Volume DSP: Calculate Pan with Pansweep
;   A = Pansweep high
;   Y = Pan high
;   Returns A = Calculated Pan
0FD4: C4 C0     MOV   $C0,A         ($C0 = Pansweep high)
0FD6: DD        MOV   A,Y           (A = Pan high)
0FD7: 60        CLRC                (Clear Carry for addition)
0FD8: 84 C0     ADC   A,$C0         (Add Pansweep to Pan)
0FDA: E3 C0 06  BBS7  $C0,$0FE3     (If signed skip 3 instructions)
0FDD: 90 08     BCC   $0FE7         (If carry clear then exit)
0FDF: E8 FF     MOV   A,#$FF        (A = #$FF, high boundary)
0FE1: 2F 04     BRA   $0FE7         (Exit) (RET...)
0FE3: B0 02     BCS   $0FE7         (If carry set then exit)
0FE5: E8 00     MOV   A,#$00        (Zero A, low boundary)
0FE7: 6F        RET                 (Return)

; Interrupt $FD: Write to DSP register
0FE8: EB 8C     MOV   Y,$8C         (DSP Register: interrupt b1)
0FEA: E4 8D     MOV   A,$8D         (Parameter: interrupt b2)
0FEC: 5F 48 06  JMP   $0648         (Store A to DSP register Y)

; Wait timer1 target * (X)/8 ms
0FEF: 8F 05 F1  MOV   $F1,#$05      (Enable timers 0 and 2)
0FF2: E4 FE     MOV   A,$FE         (Counter-1, 16 milliseconds)
0FF4: 8F 07 F1  MOV   $F1,#$07      (Enable all 3 timers)
0FF7: E8 00     MOV   A,#$00        (Zero A)
0FF9: EB FE     MOV   Y,$FE         (Counter-1, 16 milliseconds)
0FFB: F0 FC     BEQ   $0FF9         (Loop if zero)
0FFD: BC        INC   A             (Increase A)
0FFE: 66        CMP   A,(X)         (Matches requirement?)
0FFF: D0 F8     BNE   $0FF9         (Loop if not)
1001: 6F        RET                 (Return)

; Interrupt $FC: Initialize Echo
1002: 38 0F 8C  AND   $8C,#$0F      (#$05 unless from interrupt)
1005: FA 8C 80  MOV   ($80),($8C)   (Set new echo delay value = $8C)
1008: 3F 15 10  CALL  $1015         (Disable Echo and Configure)
100B: 3F 41 10  CALL  $1041         (Enable echo)
100E: E4 52     MOV   A,$52         (A = Enabled Voices bitmask)
1010: D0 02     BNE   $1014         (Return if none)
1012: C4 4D     MOV   $4D,A         (Set echo volume)
1014: 6F        RET                 (Return)

; Disable echo, set echo buffer address, etc.
1015: 8F 6C F2  MOV   $F2,#$6C      (Point to flags register)
1018: E4 F3     MOV   A,$F3         (Current setting)
101A: 08 20     OR    A,#$20        (Disable echo)
101C: C4 F3     MOV   $F3,A         (Save changes)
101E: 8D 7D     MOV   Y,#$7D        (Value for echo delay)
1020: CB F2     MOV   $F2,Y         (Set DSP register)
1022: E4 F3     MOV   A,$F3         (Current setting)
1024: 28 0F     AND   A,#$0F        (Clear highest operative bit)
1026: C4 81     MOV   $81,A         (Set echo wait time)
1028: E4 80     MOV   A,$80         (Parameter)
102A: 3F 48 06  CALL  $0648         (Write Parameter)
102D: 1C        ASL   A             (Double A)
102E: 1C        ASL   A             (Double A)
102F: 1C        ASL   A             (Double A)
1030: 48 FF     EOR   A,#$FF        (Toggle all bits)
1032: BC        INC   A             (Add one)
1033: 60        CLRC                (Clear Carry for addition)
1034: 88 F5     ADC   A,#$F5        (Add #$F5)
1036: 8D 6D     MOV   Y,#$6D        (Point to echo RAM)
1038: 3F 48 06  CALL  $0648         (Set echo address to $F500+n)
103B: CD 81     MOV   X,#$81        (Counter-1 requirement held in $81)
103D: 3F EF 0F  CALL  $0FEF         (Wait timer1 target * $81/8 ms)
1040: 6F        RET                 (Return)

; Enable echo
1041: E4 80     MOV   A,$80         (A = New Echo Delay Value)
1043: F0 05     BEQ   $104A         (If zero skip 2 instructions)
1045: CD 80     MOV   X,#$80        (Counter-1 requirement held in $80)
1047: 3F EF 0F  CALL  $0FEF         (Wait timer1 target * $80/8 ms)
104A: 8F 6C F2  MOV   $F2,#$6C      (Flags register)
104D: E4 F3     MOV   A,$F3         (Current setting)
104F: 28 DF     AND   A,#$DF        (Enable echo)
1051: C4 F3     MOV   $F3,A         (Save changes)
1053: 6F        RET                 (Return)

; Pause Current Song
1054: 78 2F C7  CMP   $C7,#$2F      (Is Current Song Index == #$2F, Fanfare)
1057: F0 3B     BEQ   $1094         (Exit if so)
1059: FA C7 C6  MOV   ($C6),($C7)   (Set Paused Song Index to Current Song Index)
105C: E8 00     MOV   A,#$00        (Zero A)
105E: C4 90     MOV   $90,A         (Pointer to Voice Data low)
1060: E8 F6     MOV   A,#$F6        (A = #$F6)
1062: C4 91     MOV   $91,A         (Pointer to Voice Data high, $F600)
1064: E8 00     MOV   A,#$00        (Zero A)
1066: C4 92     MOV   $92,A         (Pointer to Paused Voice Data low)
1068: E8 FA     MOV   A,#$FA        (A = #$FA)
106A: C4 93     MOV   $93,A         (Pointer to Paused Voice Data high, $FA00)
106C: 8D 00     MOV   Y,#$00        (Zero Y)
106E: F7 90     MOV   A,($90)+Y     (Transfer from Voice Data $F600)
1070: D7 92     MOV   ($92)+Y,A     (to Paused Voice Data $FA00)
1072: FC        INC   Y             (Next byte to transfer)
1073: D0 F9     BNE   $106E         (Loop for $100 bytes)
1075: AB 91     INC   $91           (Increment Voice Data high)
1077: AB 93     INC   $93           (Increment Paused Voice Data high)
1079: 78 FA 91  CMP   $91,#$FA      (Has Voice Data high reached the end)
107C: D0 F0     BNE   $106E         (Loop if not)
107E: 1A 92     DECW  $92           ($92 = $FDFF)
1080: 8D 80     MOV   Y,#$80        (Y = #$80)
1082: F6 FF FF  MOV   A,$FFFF+Y     (Copy $80 bytes from DP 0)
1085: D7 92     MOV   ($92)+Y,A     (store at $FE00-$FE80)
1087: FE F9     DBNZ  Y,$1082       (Decrease Y, loop unless zero)
1089: AB 93     INC   $93           ($93 = #$FE)
108B: 8D A0     MOV   Y,#$A0        (Y = #$A0)
108D: F6 FF 00  MOV   A,$00FF+Y     (Copy $A0 bytes from DP 1, $0100-$01A0)
1090: D7 92     MOV   ($92)+Y,A     (Store at $FF00-$FFA0)
1092: FE F9     DBNZ  Y,$108D       (Decrease Y, loop unless zero)
1094: 6F        RET                 (Return)

; Transfer Paused Data back to Current Data
1095: 8F FF C6  MOV   $C6,#$FF      (Paused Song = #$FF)
1098: E8 00     MOV   A,#$00        (Zero A)
109A: C4 90     MOV   $90,A         (#$00)
109C: E8 F6     MOV   A,#$F6        (#$F6)
109E: C4 91     MOV   $91,A         (Point to $F600, Current Voice Data)
10A0: E8 00     MOV   A,#$00        (Zero A)
10A2: C4 92     MOV   $92,A         (#$00)
10A4: E8 FA     MOV   A,#$FA        (#$FA)
10A6: C4 93     MOV   $93,A         (Point to $FA00, Paused Voice Data)
10A8: 8D 00     MOV   Y,#$00        (Zero Y)
10AA: F7 92     MOV   A,($92)+Y     (From $FA00+Y, Paused)
10AC: D7 90     MOV   ($90)+Y,A     (To F600+Y, Current)
10AE: FC        INC   Y             (Increment Y)
10AF: D0 F9     BNE   $10AA         (Loop for $100 bytes)
10B1: AB 91     INC   $91           (Point to next $100)
10B3: AB 93     INC   $93           (Point to next $100)
10B5: 78 FA 91  CMP   $91,#$FA      (Have we reached $FA00)
10B8: D0 F0     BNE   $10AA         (Loop for $400 bytes)
10BA: 1A 92     DECW  $92           (Point to $FDFF)
10BC: 8D 80     MOV   Y,#$80        (Y = #$80, dp0 size)
10BE: F7 92     MOV   A,($92)+Y     (From Saved dp 0)
10C0: D6 FF FF  MOV   $FFFF+Y,A     (To dp 0)
10C3: FE F9     DBNZ  Y,$10BE       (Decrease Y, loop unless zero)
10C5: AB 93     INC   $93           (Point to $FEFF)
10C7: 8D A0     MOV   Y,#$A0        (Y = #$A0, dp1 size)
10C9: F7 92     MOV   A,($92)+Y     (From Saved dp 1)
10CB: D6 FF 00  MOV   $00FF+Y,A     (To dp 1)
10CE: FE F9     DBNZ  Y,$10C9       (Decrease Y, loop unless zero)
10D0: 8F 81 8B  MOV   $8B,#$81      (Interrupt command $81)
10D3: 8F 10 8C  MOV   $8C,#$10      (Parameter Volume: #$10)
10D6: 8F FF 8D  MOV   $8D,#$FF      (Parameter Envelope: #$FF)
10D9: 8F 20 A6  MOV   $A6,#$20      (Master Volume high = #$20)
10DC: 5F 6A 0C  JMP   $0C6A         ($81: Set master volume to yy, w/ envelope xx)

; Waveform Output Mode
;   $8F     DSP Register for Current Channel
;   $98-$9B Output Data (Each byte stereo format 1LLL-RRR)
;   $9C     Current Output Left (joined with A for Right)
;   $9D     Pointer to Output Data
;   $9E     Pointer to Calculated Volume
;   $A0     End of Calculated volume chunk
;   $A1     bit7 set
;   $C9-$D8 Calculated volume for each voice (2 bytes each, left then right)
10DF: E8 98     MOV   A,#$98        (A = #$98)
10E1: C4 9D     MOV   $9D,A         (Set Pointer to Output Data)
10E3: E8 C9     MOV   A,#$C9        (A = #$C9, Pointer to Calculated volume for each voice)
10E5: 8F 00 A1  MOV   $A1,#$00      (Zero $A1)
10E8: 83 86 05  BBS4  $86,$10F0     (If last 4 voices skip 2 instructions)
10EB: 8F 09 8F  MOV   $8F,#$09      (Set DSP Register = #$09, -OUTX ch0)
10EE: 2F 08     BRA   $10F8         (Skip 4 instructions)
10F0: 8F 49 8F  MOV   $8F,#$49      (Set DSP Register = #$49, -OUTX ch4)
10F3: 60        CLRC                (Clear Carry for addition)
10F4: 88 08     ADC   A,#$08        (A = #$D1, Last 4 voices Calculated Volume Pointer)
10F6: E2 A1     SET7  $A1           ($A1 = #$80)
10F8: C4 9E     MOV   $9E,A         ($9E = Pointer to Calculated Volume)
10FA: 60        CLRC                (Clear Carry for addition)
10FB: 88 08     ADC   A,#$08        (A = $D1/$D9)
10FD: C4 A0     MOV   $A0,A         ($A0 = End of Voices)
10FF: F8 9E     MOV   X,$9E         (X = Pointer to Calculated Volume)
1101: EB 8F     MOV   Y,$8F         (Y = DSP Register x9 -OUTX)
1103: CB F2     MOV   $F2,Y         (Set register address)
1105: EB F3     MOV   Y,$F3         (Current -OUTX)
1107: 6D        PUSH  Y             (Save temporarily)
1108: BF        MOV   A,(X)+        (Calculated Volume L for Voice)
1109: 1C        ASL   A             (Double A)
110A: CF        MUL   YA            (Current -OUTX  * Calculated Volume L)
110B: DD        MOV   A,Y           (Transfer Y to A)
110C: 28 70     AND   A,#$70        (Mask -LLL----)
110E: C4 9C     MOV   $9C,A         ($9C = Output L)
1110: EE        POP   Y             (Restore setting)
1111: BF        MOV   A,(X)+        (Calculated Volume R for Voice)
1112: 1C        ASL   A             (Double A)
1113: CF        MUL   YA            (Current -OUTX * Calculated Volume R)
1114: DD        MOV   A,Y           (Transfer Y to A)
1115: D8 9E     MOV   $9E,X         ($9E = Current Pointer to Calculated Volume)
1117: F8 9D     MOV   X,$9D         (X = Pointer to Output Data)
1119: 9F        XCN   A             (Swap high 4 and low 4 bits)
111A: 28 07     AND   A,#$07        (Mask  -----RRR)
111C: 04 9C     OR    A,$9C         (A = -LLL-RRR)
111E: 04 A1     OR    A,$A1         (A = 1LLL-RRR)
1120: AF        MOV   (X)+,A        (Set Output Data, $98-$9B)
1121: D8 9D     MOV   $9D,X         (Set new Pointer to Output Data)
1123: 60        CLRC                (Clear Carry for addition)
1124: 98 10 8F  ADC   $8F,#$10      (Next DSP channel)
1127: 69 A0 9E  CMP   ($9E),($A0)   (Current Voice is End of Voices)
112A: D0 D3     BNE   $10FF         (Loop for 4 voices)
112C: BA 98     MOVW  YA,$98        (YA = Output Data Voice 1 and 2)
112E: DA F4     MOVW  $F4,YA        (Port $2140 and $2141)
1130: BA 9A     MOVW  YA,$9A        (YA = Output Data Voice 3 and 4) 
1132: DA F6     MOVW  $F6,YA        (Port $2142 and $2143)
1134: EA 86 80  NOT1  $86,4         (Toggle update first/last 4 voices for waveform output mode)
1137: 6F        RET                 (Return)

; Process Master Envelopes (Master Vol, SFX Vol, SFX Pan, Tempo Ratio, Master Pitch)
1138: E4 AD     MOV   A,$AD         (A = Master Volume Envelope Counter)
113A: F0 0F     BEQ   $114B         (If no envelope skip 7 instructions)
113C: 8B AD     DEC   $AD           (Decrement MVol Env. Counter)
113E: BA A9     MOVW  YA,$A9        (YA = Master Volume Envelope Change Rate)
1140: 7A A5     ADDW  YA,$A5        (Add Master Volume to Change Rate)
1142: 7E A6     CMP   Y,$A6         (Detect if Master Volume changed)
1144: DA A5     MOVW  $A5,YA        (Store Master Volume)
1146: F0 03     BEQ   $114B         (If no change skip next instruction)
1148: 09 52 DB  OR    ($DB),($52)   (Enable Volume Update in DSP for Enabled Voices)
114B: E4 AF     MOV   A,$AF         (A = SFX Volume Envelope Counter)
114D: F0 1D     BEQ   $116C         (If no envelope skip 13 instructions)
114F: BA AB     MOVW  YA,$AB        (YA = SFX Volume Envelope Change Rate)
1151: 7A A7     ADDW  YA,$A7        (Add SFX Volume to Change Rate)
1153: 7E A8     CMP   Y,$A8         (Detect if SFX Volume changed)
1155: DA A7     MOVW  $A7,YA        (Store SFX Volume)
1157: F0 03     BEQ   $115C         (If no change skip next instruction)
1159: 09 83 DB  OR    ($DB),($83)   (Enable Volume Update in DSP for Game SFX Voices)
115C: 8B AF     DEC   $AF           (Decrement SFX Volume Envelope Counter)
115E: D0 0C     BNE   $116C         (If envelope active skip 5 instructions)
1160: DD        MOV   A,Y           (Transfer Y to A)
1161: D0 09     BNE   $116C         (If SFX has volume skip 3 instructions)
1163: 8F FF A8  MOV   $A8,#$FF      (Set SFX Volume high = Max)
1166: 8F F2 8B  MOV   $8B,#$F2      (Interrupt command b0 = #$F2)
1169: 3F 6F 0D  CALL  $0D6F         (Interrupt $F2: Stop sound effect)
116C: E4 B5     MOV   A,$B5         (A = SFX Pan Envelope Counter)
116E: F0 0F     BEQ   $117F         (If no envelope skip 7 instructions)
1170: 8B B5     DEC   $B5           (Decrement SFX Pan Envelope Counter)
1172: BA B3     MOVW  YA,$B3        (YA = SFX Pan Envelope Change Rate)
1174: 7A B1     ADDW  YA,$B1        (Add SFX Pan to Change Rate)
1176: 7E B2     CMP   Y,$B2         (Detect if SFX Pan changed)
1178: DA B1     MOVW  $B1,YA        (Store SFX Pan)
117A: F0 03     BEQ   $117F         (If no change skip next instruction)
117C: 09 83 DB  OR    ($DB),($83)   (Enable Volume Update in DSP for Game SFX Voices)
117F: E4 BA     MOV   A,$BA         (A = Tempo Ratio Envelope Counter)
1181: F0 08     BEQ   $118B         (If no envelope skip 4 instructions)
1183: 8B BA     DEC   $BA           (Decrement Tempo Ratio Envelope Counter)
1185: BA B8     MOVW  YA,$B8        (YA = Tempo Ratio Envelope Change Rate)
1187: 7A B6     ADDW  YA,$B6        (Add Tempo Ratio? to Change Rate)
1189: DA B6     MOVW  $B6,YA        (Store Tempo Ratio?)
118B: E4 BF     MOV   A,$BF         (A = Master Pitch Multiplier Envelope Counter
118D: F0 0F     BEQ   $119E         (If no envelope exit)
118F: 8B BF     DEC   $BF           (Decrement Master Pitch Multiplier Envelope Counter)
1191: BA BD     MOVW  YA,$BD        (YA = Master Pitch Multiplier Envelope Change Rate)
1193: 7A BB     ADDW  YA,$BB        (Add Master Pitch Multiplier to Change Rate)
1195: 7E BC     CMP   Y,$BC         (Detect if Master Pitch Multiplier changed)
1197: DA BB     MOVW  $BB,YA        (Store Master Pitch Multiplier)
1199: F0 03     BEQ   $119E         (If no change skip next instruction)
119B: 09 52 DC  OR    ($DC),($52)   (Enable Volume Update in DSP for Enabled Voices)
119E: 6F        RET                 (Return)

; Jump table for Interrupt $FE: Transfer Data from SCPU
119F: 13 0F     ($0F13) ; $00 No transfer
11A1: E6 0E     ($0EE6) ; $01 Transfer one byte at a time
11A3: B2 0E     ($0EB2) ; $02 Transfer two bytes at a time
11A5: 76 0E     ($0E76) ; $03 Transfer three bytes at a time
11A7: 13 0F     ($0F13) ; $04 -
11A9: 13 0F     ($0F13) ; $05 -
11AB: 13 0F     ($0F13) ; $06 -
11AD: 31 0F     ($0F31) ; $07 Move chunk

; Track Command $F0: Set Tempo
11AF: C4 46     MOV   $46,A         (Set Tempo in BPM)
11B1: E8 00     MOV   A,#$00        (Zero A)
11B3: C4 45     MOV   $45,A         (Zero Tempo high byte)
11B5: C4 49     MOV   $49,A         (Zero Tempo Envelope Counter)
11B7: 6F        RET                 (Return)

; Track Command $F1: Set Tempo w/ Envelope
11B8: C4 49     MOV   $49,A         (Set Tempo Envelope Counter)
11BA: C4 8C     MOV   $8C,A         (Set interrupt code b1)
11BC: 3F C9 05  CALL  $05C9         (Next Script Byte)
11BF: EB 8C     MOV   Y,$8C         (Y = interrupt code b1)
11C1: F0 EC     BEQ   $11AF         (If counter is 0 goto Set Tempo)
11C3: 80        SETC                (Set Carry for subtraction)
11C4: A4 46     SBC   A,$46         (Tempo to set == Current Tempo)
11C6: F0 ED     BEQ   $11B5         (if so goto Zero Tempo Envelope Counter and RET)
11C8: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
11CB: F8 A3     MOV   X,$A3         (X = Voice Pointer)
11CD: DA 4A     MOVW  $4A,YA        (Set Envelope Change Rate)
11CF: 6F        RET                 (Return)

; Track Command $F4: Set Song Volume
11D0: C4 51     MOV   $51,A         (Set Song Volume)
11D2: 6F        RET                 (Return)

; Track Command $C4: Set Voice Volume to xx (00-7F)
11D3: 28 7F     AND   A,#$7F        (Remove high bit)
11D5: D5 21 F6  MOV   $F621+X,A     (Set Voice Volume high byte)
11D8: E8 00     MOV   A,#$00        (Zero A)
11DA: D5 20 F6  MOV   $F620+X,A     (Zero Voice Volume low byte)
11DD: 09 8F DB  OR    ($DB),($8F)   (Enable Volume update in DSP for Current Voice)
11E0: D5 A0 F6  MOV   $F6A0+X,A     (Zero Voice Volume Envelope Counter)
11E3: 6F        RET                 (Return)

; Track Command $C5: Set Voice Volume w/ Envelope (yy: volume, xx: envelope duration)
11E4: D5 A0 F6  MOV   $F6A0+X,A     (Set Voice Volume Envelope Counter)
11E7: C4 8C     MOV   $8C,A         (Set interrupt command b1)
11E9: 3F C9 05  CALL  $05C9         (Next Script Byte)
11EC: 28 7F     AND   A,#$7F        (Remove high bit)
11EE: EB 8C     MOV   Y,$8C         (Y = Interrupt command b1)
11F0: F0 E1     BEQ   $11D3         (If no envelope goto Track Command $C4)
11F2: 80        SETC                (Set Carry for subtraction)
11F3: B5 21 F6  SBC   A,$F621+X     (Subtract Current Voice Volume)
11F6: F0 E8     BEQ   $11E0         (If zero, zero counter and exit)
11F8: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
11FB: F8 A3     MOV   X,$A3         (X = Voice Pointer)
11FD: D5 40 F6  MOV   $F640+X,A     (Set Voice Volume Envelope Change Rate high)
1200: DD        MOV   A,Y           (Transfer Y to A)
1201: D5 41 F6  MOV   $F641+X,A     (Set Voice Volume Envelope Change Rate low)
1204: 6F        RET                 (Return)

; Track Command $F2: Set Song Echo Volume
1205: AA A2 E0  MOV1  C,$A2,7       (Set carry to signature)
1208: 7C        ROR   A             (Halve A)
1209: C4 4D     MOV   $4D,A         (Set Echo Volume high byte)
120B: E8 00     MOV   A,#$00        (Zero A)
120D: C4 4C     MOV   $4C,A         (Zero Echo Volume low byte)
120F: C4 50     MOV   $50,A         (Zero Echo Volume Envelope Counter)
1211: 6F        RET                 (Return)

; Track Command $F3: Set Song Echo Volume w/ Envelope
1212: C4 50     MOV   $50,A         (Set Echo Volume Envelope Counter)
1214: C4 8C     MOV   $8C,A         (Set Interrupt command b1)
1216: 3F C9 05  CALL  $05C9         (Next Script Byte)
1219: EB 8C     MOV   Y,$8C         (Y = Interrupt command b1)
121B: F0 E8     BEQ   $1205         (If envelope is zero goto Track Command $F2)
121D: AA A2 E0  MOV1  C,$A2,7       (Set carry to signature)
1220: 7C        ROR   A             (Halve A)
1221: 48 80     EOR   A,#$80        (Sign negative)
1223: EA 4D E0  NOT1  $4D,7         (Invert signature for Echo Volume)
1226: 80        SETC                (Set Carry for subtraction)
1227: A4 4D     SBC   A,$4D         (Subtract echo volume)
1229: EA 4D E0  NOT1  $4D,7         (Invert signature for Echo Volume)
122C: F0 E1     BEQ   $120F         (If zero, zero envelope counter and exit)
122E: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
1231: F8 A3     MOV   X,$A3         (X = Voice Pointer)
1233: DA 4E     MOVW  $4E,YA        (Set Echo Volume Envelope Change Rate)
1235: 6F        RET                 (Return)

; Track Command $C6: Set Voice Pan
1236: 1C        ASL   A             (Double A)
1237: D5 61 F6  MOV   $F661+X,A     (Set Voice Pan high byte)
123A: E8 00     MOV   A,#$00        (Zero A)
123C: D5 60 F6  MOV   $F660+X,A     (Zero Voice Pan low byte)
123F: 09 8F DB  OR    ($DB),($8F)   (Enable Volume update in DSP for Current Voice)
1242: D5 A1 F6  MOV   $F6A1+X,A     (Zero Pan Envelope Counter)
1245: 6F        RET                 (Return)

; Track Command $C7: Set Voice Pan w/ Envelope
1246: D5 A1 F6  MOV   $F6A1+X,A     (Set Pan Envelope Counter)
1249: C4 8C     MOV   $8C,A         (Set Interrupt command b1)
124B: 3F C9 05  CALL  $05C9         (Next Script Byte)
124E: EB 8C     MOV   Y,$8C         (Y = Interrupt command b1)
1250: F0 E4     BEQ   $1236         (If no envelope goto Track Command $C6)
1252: 1C        ASL   A             (Double A)
1253: 80        SETC                (Set Carry for subtraction)
1254: B5 61 F6  SBC   A,$F661+X     (Subtract Pan high byte)
1257: F0 E9     BEQ   $1242         (If zero, zero Pan Envelope Counter and exit)
1259: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
125C: F8 A3     MOV   X,$A3         (X = Voice Pointer)
125E: D5 80 F6  MOV   $F680+X,A     (Set Pan Envelope Change Rate low)
1261: DD        MOV   A,Y           (Transfer Y to A)
1262: D5 81 F6  MOV   $F681+X,A     (Set Pan Envelope Change Rate high)
1265: 6F        RET                 (Return)

; Track Command $C8: Change Pitch w/ Envelope
1266: BC        INC   A             (Increment A)
1267: D5 20 F7  MOV   $F720+X,A     (Set Pitch Envelope Duration)
126A: 3F C9 05  CALL  $05C9         (Next Script Byte)
126D: D5 50 01  MOV   $0150+X,A     (Set Pitch Envelope Target)
1270: 6F        RET                 (Return)

; Track Command $DA: Add to Transpose
1271: 60        CLRC                (Clear Carry for addition)
1272: 95 21 F7  ADC   A,$F721+X     (Add Transposition to parameter)
1275: D5 21 F7  MOV   $F721+X,A     (Set Transposition, Command $D9 jumps here)
1278: 6F        RET                 (Return)

; Track Command $F7: Set Echo Feedback to yy over xx frames
1279: C4 78     MOV   $78,A         (Set Echo Feedback Envelope Counter)
127B: C4 8C     MOV   $8C,A         (Set Interrupt command b1)
127D: 3F C9 05  CALL  $05C9         (Next Script Byte)
1280: EB 8C     MOV   Y,$8C         (Y = Interrupt command b1)
1282: F0 14     BEQ   $1298         (If envelope is zero, set echo feedback and exit)
1284: 48 80     EOR   A,#$80        (Invert Signature)
1286: EA 76 E0  NOT1  $76,7         (Invert signature for Echo Feedback)
1289: 80        SETC                (Set Carry for subtraction)
128A: A4 76     SBC   A,$76         (Subtract echo feedback)
128C: EA 76 E0  NOT1  $76,7         (Invert signature for Echo Feedback)
128F: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
1292: F8 A3     MOV   X,$A3         (X = Voice  Pointer)
1294: DA 79     MOVW  $79,YA        (Set Echo Feedback Change Rate)
1296: 2F 02     BRA   $129A         (Exit) (RET...)
1298: C4 76     MOV   $76,A         (Set Echo Feedback high)
129A: 6F        RET                 (Return)

; Track Command $F8: Set Filter ------yy
129B: C4 77     MOV   $77,A         (Set Filter Envelope Counter)
129D: C4 8C     MOV   $8C,A         (Set Interrupt command b1)
129F: 3F C9 05  CALL  $05C9         (Next Script Byte)       
12A2: 28 03     AND   A,#$03        (Filter A for ------yy)
12A4: BC        INC   A             (Add one)
12A5: 1C        ASL   A             (Double A)
12A6: 1C        ASL   A             (Double A)
12A7: 1C        ASL   A             (Double A)
12A8: FD        MOV   Y,A           (Transfer A to Y)
12A9: CD 10     MOV   X,#$10        (X = #$10)
12AB: E4 8C     MOV   A,$8C         (A = Filter Envelope Counter)
12AD: F0 27     BEQ   $12D6         (If no envelope skip 22 instructions)
12AF: E8 00     MOV   A,#$00        (Zero A)
12B1: D4 63     MOV   $63+X,A       (Zero Filter Data low)
12B3: F4 64     MOV   A,$64+X       (A = Filter Data high)
12B5: 48 80     EOR   A,#$80        (Invert Signature)
12B7: C4 98     MOV   $98,A         (Save A, at scratchpad)
12B9: F6 A8 17  MOV   A,$17A8+Y     (A = Filter Coefficient Y)
12BC: 48 80     EOR   A,#$80        (Invert Signature)
12BE: 80        SETC                (Set Carry for subtraction)
12BF: A4 98     SBC   A,$98         (Restore A, from scratchpad)
12C1: 6D        PUSH  Y             (Save Y)
12C2: 4D        PUSH  X             (Save X)
12C3: 3F C5 0C  CALL  $0CC5         (Calculate Change Rate to YA)
12C6: CE        POP   X             (Restore X)
12C7: D5 FE 00  MOV   $00FE+X,A     (Set Filter Envelope Change Rate low)
12CA: DD        MOV   A,Y           (Transfer Y to A)
12CB: D5 FF 00  MOV   $00FF+X,A     (Set Filter Envelope Change Rate high)
12CE: EE        POP   Y             (Restore Y)
12CF: DC        DEC   Y             (Decrement Y)
12D0: 1D        DEC   X             (Decrement X)
12D1: 1D        DEC   X             (Decrement X, next Filter Coefficient)
12D2: D0 DB     BNE   $12AF         (Loop for all Filter Coefficients)
12D4: 2F 0A     BRA   $12E0         (Load voice pointer and exit)
12D6: F6 A8 17  MOV   A,$17A8+Y     (A = Filter Coefficient Y)
12D9: D4 64     MOV   $64+X,A       (Set Filter Data $X)
12DB: DC        DEC   Y             (Decrement Y)
12DC: 1D        DEC   X             (Decrement X)
12DD: 1D        DEC   X             (Decrement X, next Filter Coefficient)
12DE: D0 F6     BNE   $12D6         (Loop for all Filter Coefficients)
12E0: F8 A3     MOV   X,$A3         (X = Voice Pointer)
12E2: 6F        RET                 (Return)

; Track Command $C9: Enable Vibrato
12E3: D5 10 01  MOV   $0110+X,A     (Set Vibrato Delay, in ticks)
12E6: 3F C9 05  CALL  $05C9         (Next Script Byte)
12E9: D5 C0 F6  MOV   $F6C0+X,A     (Set Vibrato Cycle Duration)
12EC: C4 98     MOV   $98,A         (Save A, to scratchpad)
12EE: 3F C9 05  CALL  $05C9         (Next Script Byte)
12F1: D5 51 01  MOV   $0151+X,A     (Set Vibrato Amplitude)
12F4: 3F 3C 13  CALL  $133C         (Vibrato Max Change Rate to $98)
12F7: F8 A3     MOV   X,$A3         (X = Voice Pointer)
12F9: BA 98     MOVW  YA,$98        (YA = Vibrato Delay Change Rate)
12FB: D5 C0 F7  MOV   $F7C0+X,A     (Set Maximum Vibrato Change Rate low)
12FE: DD        MOV   A,Y           (Transfer Y to A)
12FF: D5 C1 F7  MOV   $F7C1+X,A     (Set Maximum Vibrato Change Rate high)
1302: E8 00     MOV   A,#$00        (Zero A)
1304: D5 C0 F8  MOV   $F8C0+X,A     (Zero Calculated Vibrato Value low)
1307: D5 C1 F8  MOV   $F8C1+X,A     (Zero Calculated Vibrato Value high)
130A: D5 40 F8  MOV   $F840+X,A     (Zero Vibrato Value low)
130D: D5 41 F8  MOV   $F841+X,A     (Zero Vibrato Value high)
1310: F5 C0 F6  MOV   A,$F6C0+X     (A = Vibrato Cycle Duration)
1313: D5 C1 F6  MOV   $F6C1+X,A     (Set Vibrato Cycle Counter)
1316: F5 C1 F7  MOV   A,$F7C1+X     (A = Max Vibrato Change Rate high)
1319: FD        MOV   Y,A           (Transfer A to Y)
131A: F5 C0 F7  MOV   A,$F7C0+X     (A = Max Vibrato Change Rate low)
131D: DA 98     MOVW  $98,YA        ($98 = Max Vibrato Change Rate)
131F: F5 90 01  MOV   A,$0190+X     (A = Tremolo/Vibrato Gain Counter)
1322: 28 70     AND   A,#$70        (A = Tremolo Gain Counter)
1324: FD        MOV   Y,A           (Transfer A to Y)
1325: F5 10 01  MOV   A,$0110+X     (A = Vibrato Delay, in ticks)
1328: D5 11 01  MOV   $0111+X,A     (Set Vibrato Delay Counter)
132B: 3F 66 13  CALL  $1366         (Calculate Gain Counter)
132E: D5 90 01  MOV   $0190+X,A     (Set Tremolo/Vibrato Gain Counter)
1331: E4 98     MOV   A,$98         (A = Calculated Vibrato Change Rate low)
1333: D5 E0 F7  MOV   $F7E0+X,A     (Set Vibrato Change Rate low)
1336: E4 99     MOV   A,$99         (A = Calculated Vibrato Change Rate high)
1338: D5 E1 F7  MOV   $F7E1+X,A     (Set Vibrato Change Rate high)
133B: 6F        RET                 (Return)

; Max Change Rate to $98 (Vibrato/Tremolo)
133C: 28 3F     AND   A,#$3F        (Filter A as --yyyyyy)
133E: BC        INC   A             (Increment A)
133F: 8D 00     MOV   Y,#$00        (Zero Y)
1341: CB 99     MOV   $99,Y         (Zero Change Rate high at scratchpad)
1343: F8 98     MOV   X,$98         (X = Vibrato Delay)
1345: F0 06     BEQ   $134D         (If no delay skip 4 instructions)
1347: 9E        DIV   YA,X          (YA / X => A)
1348: C4 99     MOV   $99,A         (Store Change Rate high to scratchpad)
134A: E8 00     MOV   A,#$00        (Zero A)
134C: 9E        DIV   YA,X          (YA / X => A)
134D: C4 98     MOV   $98,A         (Store Change Rate low to scratchpad)
134F: 4B 99     LSR   $99           (Halve Change Rate high)
1351: 6B 98     ROR   $98           (Halve Change Rate low with carry)
1353: 4B 99     LSR   $99           (Halve Change Rate high)
1355: 6B 98     ROR   $98           (Halve Change Rate low with carry)
1357: BA 98     MOVW  YA,$98        (YA = Change Rate)
1359: D0 02     BNE   $135D         (If not zero skip next instruction)
135B: AB 98     INC   $98           (Increment Change Rate)
135D: 0B 98     ASL   $98           (Double Change Rate low)
135F: 2B 99     ROL   $99           (Double Change Rate high with carry)
1361: 0B 98     ASL   $98           (Double Change Rate low)
1363: 2B 99     ROL   $99           (Double Change Rate high with carry)
1365: 6F        RET                 (Return)

; Calculate Gain Counter (Vibrato/Tremolo)
1366: 0D        PUSH  PSW           (Save Flags)
1367: F0 08     BEQ   $1371         (If zero skip 4 instructions)
1369: 4B 99     LSR   $99           (Halve Max Vibrato Change Rate)
136B: 6B 98     ROR   $98           (Halve Max Vibrato Change Rate)
136D: 4B 99     LSR   $99           (Halve Max Vibrato Change Rate)
136F: 6B 98     ROR   $98           (Halve Max Vibrato Change Rate)
1371: 78 80 A2  CMP   $A2,#$80      (Is Mode 2 Negative)
1374: 90 0D     BCC   $1383         (If not skip 5 instructions)
1376: 78 C0 A2  CMP   $A2,#$C0      (Is Mode 3 Balanced)
1379: B0 08     BCS   $1383         (If so skip 3 instructions)
137B: 58 FF 98  EOR   $98,#$FF      (Invert Max Vibrato Change Rate)
137E: 58 FF 99  EOR   $99,#$FF      (Invert Max Vibrato Change Rate)
1381: 3A 98     INCW  $98           (Increment Max Vibrato Change Rate)
1383: 8E        POP   PSW           (Restore Flags)
1384: F0 04     BEQ   $138A         (If delay in ticks is zero skip to $138A)
1386: DD        MOV   A,Y           (Transfer Y to A)
1387: 08 07     OR    A,#$07        (Filter A as -----111)
1389: 8D DD     MOV   Y,#$DD        (Y = #$DD)
-> 138A: DD        MOV   A, Y       (Transfer Y to A, from $1384 above)
138B: 6F        RET                 (Return)

; Track Command $CA: Disable Vibrato
138C: D5 51 01  MOV   $0151+X,A     (Set Vibrato Amplitude)
138F: D5 C0 F8  MOV   $F8C0+X,A     (Set Calculated Vibrato Value low)
1392: D5 C1 F8  MOV   $F8C1+X,A     (Set Calculated Vibrato Value high)
1395: 6F        RET                 (Return)

; Track Command $CB: Enable Tremolo
1396: D5 30 01  MOV   $0130+X,A     (Set Tremolo Delay, in ticks)
1399: 3F C9 05  CALL  $05C9         (Next Script Byte)
139C: D5 E0 F6  MOV   $F6E0+X,A     (Set Tremolo Cycle Duration)
139F: C4 98     MOV   $98,A         ($98 = Tremolo Cycle Duration)
13A1: 3F C9 05  CALL  $05C9         (Next Script Byte)
13A4: D5 70 01  MOV   $0170+X,A     (Set Tremolo Mode/Amplitude)
13A7: 3F 3C 13  CALL  $133C         (Delay Change Rate to $98)
13AA: F8 A3     MOV   X,$A3         (X = Voice Pointer)
13AC: E4 98     MOV   A,$98         (A = Calculated Change Rate low)
13AE: D5 00 F8  MOV   $F800+X,A     (Set Delay Tremolo Change Rate low)
13B1: E4 99     MOV   A,$99         (A = Calculated Change Rate high)
13B3: D5 01 F8  MOV   $F801+X,A     (Set Delay Tremolo Change Rate high)
13B6: E8 00     MOV   A,#$00        (Zero A)
13B8: D5 60 F8  MOV   $F860+X,A     (Zero Tremolo Value low)
13BB: D5 61 F8  MOV   $F861+X,A     (Zero Tremolo Value high)
13BE: F5 E0 F6  MOV   A,$F6E0+X     (A = Tremolo Cycle Duration)
13C1: D5 E1 F6  MOV   $F6E1+X,A     (Set Tremolo Cycle Counter)
13C4: F5 01 F8  MOV   A,$F801+X     (A = Delayed Tremolo Change Rate high)
13C7: FD        MOV   Y,A           (Transfer A to Y)
13C8: F5 00 F8  MOV   A,$F800+X     (A = Delayed Tremolo Change Rate low)
13CB: DA 98     MOVW  $98,YA        ($98 = Delayed Tremolo Change Rate)
13CD: F5 90 01  MOV   A,$0190+X     (A = Tremolo/Vibrato Gain Counter)
13D0: 28 70     AND   A,#$70        (Mask Tremolo Gain Counter)
13D2: FD        MOV   Y,A           (Transfer A to Y)
13D3: F5 30 01  MOV   A,$0130+X     (A = Tremolo Delay, in ticks)
13D6: D5 31 01  MOV   $0131+X,A     (Set Tremolo Delay Counter)
13D9: 3F 66 13  CALL  $1366         (Calculate Gain Counter)
13DC: D5 90 01  MOV   $0190+X,A     (Set Tremolo/Vibrato Gain Counter)
13DF: E4 98     MOV   A,$98         (A = Delayed Tremolo Change Rate low)
13E1: D5 20 F8  MOV   $F820+X,A     (Set Tremolo Change Rate low)
13E4: E4 99     MOV   A,$99         (A = Delayed Tremolo Change Rate high)
13E6: D5 21 F8  MOV   $F821+X,A     (Set Tremolo Change Rate high)
13E9: 6F        RET                 (Return)

; Track Command $CC: Disable Tremolo
13EA: D5 70 01  MOV   $0170+X,A     (Set Tremolo Mode/Amplitude)
13ED: D5 60 F8  MOV   $F860+X,A     (Set Tremolo Value low)
13F0: D5 61 F8  MOV   $F861+X,A     (Set Tremolo Value high)
13F3: 6F        RET                 (Return)

; Track Command $CD: Enable Pansweep
13F4: 60        CLRC                (Clear Carry)
13F5: BC        INC   A             (Increment A)
13F6: F0 08     BEQ   $1400         (If zero skip 4 instructions)
13F8: 28 FE     AND   A,#$FE        (Mask #$FE)
13FA: D0 05     BNE   $1401         (If not zero skip 2 instructions)
13FC: E8 02     MOV   A,#$02        (A = 2)
13FE: 2F 01     BRA   $1401         (Skip next instruction)
1400: 80        SETC                (Set Carry)
1401: D5 00 F7  MOV   $F700+X,A     (Set Pansweep Cycle Duration)
1404: 7C        ROR   A             (Halve A)
1405: D5 01 F7  MOV   $F701+X,A     (Set Pansweep Cycle Counter)
1408: FD        MOV   Y,A           (Transfer A to Y)
1409: 3F C9 05  CALL  $05C9         (Next Script Byte)
140C: 1C        ASL   A             (Double A ..)
140D: E4 A2     MOV   A,$A2         (A = Pansweep Cycle Duration)
140F: 28 7F     AND   A,#$7F        (Mask #$7F)
1411: 90 02     BCC   $1415         (If no carry skip next instruction)
1413: 48 7F     EOR   A,#$7F        (Invert A)
1415: C4 98     MOV   $98,A         (Set $98, Pansweep Cycle Duration)
1417: DD        MOV   A,Y           (Transfer Y to A)
1418: 10 05     BPL   $141F         (If ? skip 2 instructions)
141A: 8F 00 99  MOV   $99,#$00      (Zero Pansweep Cycle Duration high)
141D: 2F 13     BRA   $1432         (Skip 11 instructions)
141F: 5D        MOV   X,A           (Transfer A to X)
1420: 8D 00     MOV   Y,#$00        (Zero Y)
1422: E4 98     MOV   A,$98         (A = Pansweep Cycle Duration)
1424: 9E        DIV   YA,X          (YA / X = Pansweep Change Rate high)
1425: C4 99     MOV   $99,A         (Set $99 to Pansweep Change Rate high)
1427: E8 00     MOV   A,#$00        (Zero A)
1429: 9E        DIV   YA,X          (YA / X = Pansweep Change Rate low)
142A: C4 98     MOV   $98,A         (Set $98 to Pansweep Change Rate low)
142C: BA 98     MOVW  YA,$98        (YA = Pansweep Change Rate)
142E: D0 02     BNE   $1432         (If change rate skip next instruction)
1430: AB 98     INC   $98           (Increment Pansweep Change Rate)
1432: 90 08     BCC   $143C         (If not signed skip 3 instructions)
1434: 58 FF 98  EOR   $98,#$FF      (Invert Pansweep Change Rate low)
1437: 58 FF 99  EOR   $99,#$FF      (Invert Pansweep Change Rate high)
143A: 3A 98     INCW  $98           (Increment Pansweep Change Rate)
143C: F8 A3     MOV   X,$A3         (X = Voice Pointer)
143E: E4 98     MOV   A,$98         (A = Pansweep Change Rate low)
1440: D5 A0 F7  MOV   $F7A0+X,A     (Set Pansweep Change Rate low)
1443: E4 99     MOV   A,$99         (A = Pansweep Change Rate high)
1445: D5 A1 F7  MOV   $F7A1+X,A     (Set Pansweep Change Rate high)
1448: E4 A2     MOV   A,$A2         (A = Pansweep Cycle Duration)

; Track Command $CE: Disable Pansweep
144A: D5 71 01  MOV   $0171+X,A     (Set Pansweep Cycle Duration)
144D: E8 00     MOV   A,#$00        (Zero A)
144F: D5 80 F8  MOV   $F880+X,A     (Zero Pansweep Value low)
1452: D5 81 F8  MOV   $F881+X,A     (Zero Pansweep Value high)
1455: 6F        RET                 (Return)

; Track Command $D7: Increment Octave
1456: F5 00 F6  MOV   A,$F600+X     (A = Octave)
1459: BC        INC   A             (Increment A)
145A: 2F 04     BRA   $1460         (Write and return)

; Track Command $D8: Decrement Octave
145C: F5 00 F6  MOV   A,$F600+X     (A = Octave)
145F: 9C        DEC   A             (Decrement A)
1460: D5 00 F6  MOV   $F600+X,A     (Set Octave to A)
1463: 6F        RET                 (Return)

; Track Command $D4: Enable Echo
1464: C8 10     CMP   X,#$10        (> #$10)
1466: B0 05     BCS   $146D         (If SFX skip 2 instructions)
1468: 09 8F 53  OR    ($53),($8F)   (Set Enable Echo to Current Voice)
146B: 2F 03     BRA   $1470         (Skip 1 instruction)
146D: 09 8F 54  OR    ($54),($8F)   (Set Enable Echo SFX to Current Voice)
1470: E4 83     MOV   A,$83         (A = Game SFX Voices)
1472: 04 84     OR    A,$84         (with System SFX Voices)
1474: 48 FF     EOR   A,#$FF        (Inverted)
1476: 24 53     AND   A,$53         (That have Enabled Echo)
1478: 04 54     OR    A,$54         (or Enabled Echo SFX)
147A: C4 87     MOV   $87,A         (Set echo enabled voices, DSP $4D)
147C: 6F        RET                 (Return)

; Track Command $D5: Disable Echo
147D: E4 8F     MOV   A,$8F         (A = Current Voice)
147F: C8 10     CMP   X,#$10        (> #$10)
1481: B0 05     BCS   $1488         (If SFX skip 2 instructions)
1483: 4E 53 00  TCLR1 $0053         (Test and clear Enabled Echo)
1486: 2F E8     BRA   $1470         (Update bitmasks and exit)
1488: 4E 54 00  TCLR1 $0054         (Test and clear Enabled Echo SFX)
148B: 2F E3     BRA   $1470         (Update bitmasks and exit)

; Track Command $D0: Enable Noise
148D: C8 10     CMP   X,#$10        (> #$10)
148F: B0 05     BCS   $1496         (If SFX skip 2 instructions
1491: 09 8F 55  OR    ($55),($8F)   (Set Enable Noise to Current Voice)
1494: 2F 03     BRA   $1499         (Skip next instruction)
1496: 09 8F 56  OR    ($56),($8F)   (Set Enable Noise SFX to Current Voice)
1499: FA 56 98  MOV   ($98),($56)   (Set $98 to Enable Noise SFX)
149C: 12 98     CLR0  $98           (Clear bit 0)
149E: E4 8A     MOV   A,$8A         (A = DSP Flags)
14A0: 28 E0     AND   A,#$E0        (Clear Noise Generator Frequency)
14A2: EB 56     MOV   Y,$56         (Y = Enabled Noise SFX)
14A4: D0 04     BNE   $14AA         (If SFX skip 2 instructions)
14A6: 04 62     OR    A,$62         (with Noise Clock Value)
14A8: 2F 02     BRA   $14AC         (Skip next instruction)
14AA: 04 63     OR    A,$63         (with Noise Clock Value SFX)
14AC: C4 8A     MOV   $8A,A         (Set DSP Flags, new Noise Generator Frequency)
14AE: E4 83     MOV   A,$83         (A = Game SFX Voices)
14B0: 04 84     OR    A,$84         (with System SFX Voices)
14B2: 48 FF     EOR   A,#$FF        (Inverted)
14B4: 24 55     AND   A,$55         (That have Enabled Noise)
14B6: 04 98     OR    A,$98         (or Enabled Noise SFX)
14B8: C4 88     MOV   $88,A         (Set noise enabled voices, DSP $3D)
14BA: 6F        RET                 (Return)

; Track Command $D1: Disable Noise
14BB: E4 8F     MOV   A,$8F         (A = Current Voice)
14BD: C8 10     CMP   X,#$10        (> #$10)
14BF: B0 05     BCS   $14C6         (If SFX skip 2 instructions)
14C1: 4E 55 00  TCLR1 $0055         (Test and clear Enable Noise)
14C4: 2F D3     BRA   $1499         (Update bitmasks and exit)
14C6: 4E 56 00  TCLR1 $0056         (Test and clear Enable Noise SFX)
14C9: 2F CE     BRA   $1499         (Update bitmasks and exit)

; Track Command $CF: Set Noise Clock (00-1F)
14CB: 28 1F     AND   A,#$1F        (Mask #$1F, remove DSP Flags #$E0)
14CD: C8 10     CMP   X,#$10        (> #$10)
14CF: B0 04     BCS   $14D5         (If SFX skip 2 instructions)
14D1: C4 62     MOV   $62,A         (Set Noise Clock Value)
14D3: 2F C4     BRA   $1499         (Update bitmasks and exit)
14D5: C4 63     MOV   $63,A         (Set Noise Clock SFX Value)
14D7: 2F C0     BRA   $1499         (Update bitmasks and exit)

; Track Command $D2: Enable Pitch Modulation
14D9: C8 10     CMP   X,#$10        (> #$10)
14DB: B0 05     BCS   $14E2         (If SFX skip 2 instructions)
14DD: 09 8F 57  OR    ($57),($8F)   (Set Enable Pitch Mod with Current Voice)
14E0: 2F 03     BRA   $14E5         (Skip next instruction)
14E2: 09 8F 58  OR    ($58),($8F)   (Set Enable Pitch Mod SFX with Current Voice)
14E5: E4 83     MOV   A,$83         (A = Game SFX Voices)
14E7: 04 84     OR    A,$84         (with System SFX Voices)
14E9: 48 FF     EOR   A,#$FF        (Inverted)
14EB: 24 57     AND   A,$57         (That have Enabled Pitch Mod)
14ED: 04 58     OR    A,$58         (or Enabled Pitch Mod SFX)
14EF: C4 89     MOV   $89,A         (Set pitch modulation enabled voices. DSP $2D)
14F1: 6F        RET                 (Return)

; Track Command $D3: Disable Pitch Modulation
14F2: E4 8F     MOV   A,$8F         (A = Current Voice)
14F4: C8 10     CMP   X,#$10        (X > #$10)
14F6: B0 05     BCS   $14FD         (If SFX skip 2 instructions)
14F8: 4E 57 00  TCLR1 $0057         (Test and clear Enable Pitch Mod)
14FB: 2F E8     BRA   $14E5         (Update bitmasks and exit)
14FD: 4E 58 00  TCLR1 $0058         (Test and clear Enable Pitch Mod SFX)
1500: 2F E3     BRA   $14E5         (Update bitmasks and exit)

; Track Command $DC: Set Instrument
1502: D5 01 F6  MOV   $F601+X,A     (Set Instrument for Voice)
1505: 1C        ASL   A             (Double A)
1506: FD        MOV   Y,A           (Transfer A to Y)
1507: F6 00 1A  MOV   A,$1A00+Y     (Get Instrument Pitch Multiplier low)
150A: D5 40 F7  MOV   $F740+X,A     (Set Instrument Pitch Multiplier low)
150D: F6 01 1A  MOV   A,$1A01+Y     (Get Instrument Pitch Multiplier high)
1510: D5 41 F7  MOV   $F741+X,A     (Set Instrument Pitch Multiplier high)
1513: F6 80 1A  MOV   A,$1A80+Y     (Get ADSR Data low) 
1516: D5 00 F9  MOV   $F900+X,A     (Set ADSR Data low)
1519: F6 81 1A  MOV   A,$1A81+Y     (Get ADSR Data high)
151C: D5 01 F9  MOV   $F901+X,A     (Set ADSR Data high)
151F: C8 10     CMP   X,#$10        (X > #$10)
1521: B0 05     BCS   $1528         (If SFX exit)
1523: E4 8F     MOV   A,$8F         (A = Current Voice)
1525: 4E 61 00  TCLR1 $0061         (Test and Clear Ignore Song Volume)
1528: 6F        RET                 (Return)

; Update DSP SRCN for Voice with Instrument
1529: F5 01 F6  MOV   A,$F601+X     (Get Instrument)
152C: FD        MOV   Y,A           (Transfer it to Y)
152D: 7D        MOV   A,X           (Transfer X to A)
152E: 9F        XCN   A             (Swap high 4 and low 4 bits)
152F: 5C        LSR   A             (Halve A)
1530: 08 04     OR    A,#$04        (DSP $x4, SRCN Source Number)
1532: C4 F2     MOV   $F2,A         (Set register address)
1534: CB F3     MOV   $F3,Y         (Write parameter, Instrument)
1536: 2F 10     BRA   $1548         (Update ADSR and exit)

; Track Command $DD: Set ADSR Attack Value (0-F)
1538: 28 0F     AND   A,#$0F        (Mask 0-F)
153A: C4 A2     MOV   $A2,A         ($A2 = Attack Value)
153C: F5 00 F9  MOV   A,$F900+X     (A = Voice ADSR1)
153F: 28 70     AND   A,#$70        (Remove old Attack Value)
1541: 04 A2     OR    A,$A2         (Add new Attack Value)
1543: 08 80     OR    A,#$80        (Add #$80)
1545: D5 00 F9  MOV   $F900+X,A     (Store Voice ADSR1)
1548: C8 10     CMP   X,#$10        (X > #$10)
154A: B0 09     BCS   $1555         (If SFX, update ADSR and exit)
154C: E4 83     MOV   A,$83         (A = Game SFX Voices)
154E: 04 84     OR    A,$84         (with System SFX Voices)
1550: 24 8F     AND   A,$8F         (Isolate Current Voice)
1552: F0 01     BEQ   $1555         (Update DSP ADSR values for voice)
1554: 6F        RET                 (Return)

; Update DSP ADSR values for voice
1555: 7D        MOV   A,X           (Transfer X to A)
1556: 9F        XCN   A             (Swap high 4 and low 4 bits)
1557: 5C        LSR   A             (Halve A)
1558: 08 05     OR    A,#$05        (DSP $x5 ADSRx1)
155A: FD        MOV   Y,A           (Transfer A to Y)
155B: F5 00 F9  MOV   A,$F900+X     (Parameter)
155E: 3F 48 06  CALL  $0648         (Write parameter)
1561: FC        INC   Y             (DSP $x6 ADSRx2)
1562: F5 01 F9  MOV   A,$F901+X     (Parameter)
1565: 5F 48 06  JMP   $0648         (Write parameter)

; Track Command $DE: Set ADSR Decay Value (0-7)
1568: 28 07     AND   A,#$07        (Mask 0-7)
156A: 9F        XCN   A             (Swap high 4 and low 4 bits)
156B: C4 A2     MOV   $A2,A         ($A2 = Decay Value)
156D: F5 00 F9  MOV   A,$F900+X     (A = Voice ADSR1)
1570: 28 0F     AND   A,#$0F        (Remove old Decay Value)
1572: 04 A2     OR    A,$A2         (Add new Decay Value)
1574: 08 80     OR    A,#$80        (Add #$80)
1576: D5 00 F9  MOV   $F900+X,A     (Store Voice ADSR1)
1579: 2F CD     BRA   $1548         (Update ADSR and exit)

; Track Command $DF: Set ADSR Sustain Value (0-7)
157B: 28 07     AND   A,#$07        (Mask 0-7)
157D: 9F        XCN   A             (Swap high 4 and low 4 bits)
157E: 1C        ASL   A             (Shift up 1 bit)
157F: C4 A2     MOV   $A2,A         ($A2 = Sustain Value)
1581: F5 01 F9  MOV   A,$F901+X     (A = Voice ADSR2)
1584: 28 1F     AND   A,#$1F        (Remove old Sustain Value)
1586: 04 A2     OR    A,$A2         (Add new Sustain Value)
1588: D5 01 F9  MOV   $F901+X,A     (Store Voice ADSR2)
158B: 2F BB     BRA   $1548         (Update ADSR and exit)

; Track Command $E0: Set ADSR Release Value (0-31)
158D: 28 1F     AND   A,#$1F        (Mask #$1F)
158F: C4 A2     MOV   $A2,A         ($A2 = Release Value)
1591: F5 01 F9  MOV   A,$F901+X     (A = Voice ADSR2)
1594: 28 E0     AND   A,#$E0        (Remove old Releasae Value)
1596: 04 A2     OR    A,$A2         (Add new Release Value)
1598: D5 01 F9  MOV   $F901+X,A     (Store Voice ADSR2)
159B: 2F AB     BRA   $1548         (Update ADSR and exit)

; Track Command $E1: Reset ADSR Default Values
159D: F5 01 F6  MOV   A,$F601+X     (A = Instrument)
15A0: 1C        ASL   A             (Double A)
15A1: FD        MOV   Y,A           (Transfer A to Y)
15A2: F6 80 1A  MOV   A,$1A80+Y     (A = ADSR1 for Instrument)
15A5: D5 00 F9  MOV   $F900+X,A     (Set ADSR for Voice)
15A8: F6 81 1A  MOV   A,$1A81+Y     (A = ADSR2 fpr Instrument)
15AB: D5 01 F9  MOV   $F901+X,A     (Set ADSR for Voice)
15AE: 2F 98     BRA   $1548         (Update ADSR and exit)

; Track Command $FB: Ignore Song Volume
15B0: 09 8F 61  OR    ($61),($8F)   (Set Ignore Song Volume for Current Voice)
15B3: 6F        RET                 (Return)

; Track Command $E4: Enable Slur
15B4: E4 8F     MOV   A,$8F         (A = Current Voice)
15B6: C8 10     CMP   X,#$10        (X > #$10)
15B8: B0 0B     BCS   $15C5         (If SFX skip 4 instructions)
15BA: 0E 5B 00  TSET1 $005B         (Test and set Enable Slur)
15BD: 4E 5D 00  TCLR1 $005D         (Test and clear Active Slur)
15C0: 4E 5F 00  TCLR1 $005F         (Test and clear Enable Drum Roll)
15C3: 2F 09     BRA   $15CE         (Exit) (RET...)
15C5: 0E 5C 00  TSET1 $005C         (Test and set Enable Slur SFX)
15C8: 4E 5E 00  TCLR1 $005E         (Test and clear Active Slur SFX)
15CB: 4E 60 00  TCLR1 $0060         (Test and clear Enable Drum Roll SFX)
15CE: 6F        RET                 (Return)

; Track Command $E5: Disable Slur (not in jump table)
15CF: E4 8F     MOV   A,$8F         (A = Current Voice)
15D1: C8 10     CMP   X,#$10        (X > #$10)
15D3: B0 05     BCS   $15DA         (If SFX skip 2 instructions)
15D5: 4E 5B 00  TCLR1 $005B         (Test and clear Enable Slur)
15D8: 2F 03     BRA   $15DD         (Exit) (RET...)
15DA: 4E 5C 00  TCLR1 $005C         (Test and clear Enable Slur SFX)
15DD: 6F        RET                 (Return)

; Track Command $E6: Enable Drum Roll
15DE: E4 8F     MOV   A,$8F         (A = Current Voice)
15E0: C8 10     CMP   X,#$10        (X > #$10)
15E2: B0 08     BCS   $15EC         (If SFX skip 3 instructions)
15E4: 0E 5F 00  TSET1 $005F         (Test and set Enable Drum Roll)
15E7: 4E 5B 00  TCLR1 $005B         (Test and clear Enable Slur)
15EA: 2F 06     BRA   $15F2         (Exit) (RET...)
15EC: 0E 60 00  TSET1 $0060         (Test and set Enable Drum Roll SFX)
15EF: 4E 5C 00  TCLR1 $005C         (Test and clear Enable Slur SFX)
15F2: 6F        RET                 (Return)

; Track Command $E7: Disable Drum Roll (not in jump table)
15F3: E4 8F     MOV   A,$8F         (A = Current Voice)
15F5: C8 10     CMP   X,#$10        (X > #$10)
15F7: B0 05     BCS   $15FE         (If SFX skip 2 instructions)
15F9: 4E 5F 00  TCLR1 $005F         (Test and clear Enabled Drum Roll)
15FC: 2F 03     BRA   $1601         (Exit) (RET...)
15FE: 4E 60 00  TCLR1 $0060         (Test and clear Enabled Drum Roll SFX)
1601: 6F        RET                 (Return)

; Track Command $E9: Play Game Sound Effect (voice A)
1602: 8D 00     MOV   Y,#$00        (Y = 0, voice A)
1604: 2F 02     BRA   $1608         (Skip next instruction)

; Track Command $EA: Play Game Sound Effect (voice B)
1606: 8D 02     MOV   Y,#$02        (Y = 2, voice B)
1608: 3F 16 16  CALL  $1616         (Get Pointer to Game SFX as YA)
160B: D4 02     MOV   $02+X,A       (Set Current Script Pointer low)
160D: DB 03     MOV   $03+X,Y       (Set Current Script Pointer high)
160F: DD        MOV   A,Y           (Transfer Y to A)
1610: D0 03     BNE   $1615         (Exit if Y)
1612: 5F 70 17  JMP   $1770         (End of Song Script)
1615: 6F        RET                 (Return)

; Get Pointer to Game SFX as YA
1616: 8F 00 93  MOV   $93,#$00      (Zero Pointer to SFX index high)
1619: 1C        ASL   A             (Double A)
161A: 2B 93     ROL   $93           (Push carry to $93)
161C: 1C        ASL   A             (A times 4)
161D: 2B 93     ROL   $93           (Push carry to $93)
161F: C4 92     MOV   $92,A         ($92 = Pointer to SFX index low)
1621: DD        MOV   A,Y           (Transfer Y to A)
1622: 8D 2C     MOV   Y,#$2C        (YA = #$2C00 or #$2C02)
1624: 7A 92     ADDW  YA,$92        (Add Pointer to SFX index)
1626: DA 92     MOVW  $92,YA        ($92 = Address of SFX Pointer)
1628: 8D 00     MOV   Y,#$00        (Zero Y)
162A: F7 92     MOV   A,($92)+Y     (Full SFX Pointer low)
162C: 2D        PUSH  A             (Save A)
162D: FC        INC   Y             (Increment Y)
162E: F7 92     MOV   A,($92)+Y     (Full SFX Pointer high)
1630: FD        MOV   Y,A           (Transfer A to Y)
1631: AE        POP   A             (Restore A)
1632: 6F        RET                 (Return)

; Switch $E9: Play Game SFX, voice A
1633: F7 90     MOV   A,($90)+Y     (A = First Parameter, SFX Index)
1635: 8D 00     MOV   Y,#$00        (Zero Y, voice A)
1637: 2F 04     BRA   $163D         (Skip 2 instructions)

; Switch $EA: Play Game SFX, voice B
1639: F7 90     MOV   A,($90)+Y     (A = First Parameter, SFX Index)
163B: 8D 02     MOV   Y,#$02        (Y = 2, voice B)
163D: 3F 16 16  CALL  $1616         (Get pointer to Game SFX as YA)
1640: DA 90     MOVW  $90,YA        (Set Temporary Script Pointer as Game SFX Pointer)
1642: DD        MOV   A,Y           (Transfer Y to A)
1643: F0 04     BEQ   $1649         (If no sfx script exit)
1645: AE        POP   A             (Restore A)
1646: AE        POP   A             (Restore A)
1647: E8 EB     MOV   A,#$EB        (A = #$EB, Track Command $EB: End of Song Script)
1649: 6F        RET                 (Return)

; Track Command $F6: Jump to xxxx
164A: FD        MOV   Y,A           (Y = Jump Address low)
164B: 3F C9 05  CALL  $05C9         (Next Script Byte)
164E: DD        MOV   A,Y           (Transfer Y to A)
164F: EB A2     MOV   Y,$A2         (Y = Jump Address high)
1651: 7A 00     ADDW  YA,$00        (+ Song Script Offset)
1653: D4 02     MOV   $02+X,A       (Set Current Script Pointer low)
1655: DB 03     MOV   $03+X,Y       (Set Current Script Pointer high)
1657: 6F        RET                 (Return)

; Switch $F6: Jump to xxxx
1658: F7 90     MOV   A,($90)+Y     (A = First Parameter, Jump Address low)
165A: 2D        PUSH  A             (Save A)
165B: FC        INC   Y             (Increment Y)
165C: F7 90     MOV   A,($90)+Y     (A = Second Parameter, Jump Address high)
165E: FD        MOV   Y,A           (Transfer A to Y)
165F: AE        POP   A             (Restore A)
1660: 7A 00     ADDW  YA,$00        (Add Song Script Offset)
1662: DA 90     MOVW  $90,YA        (Set Temporary Script Pointer)
1664: 6F        RET                 (Return)

; Track Command $F5: Jump to yyyy When Loop Count Reaches xx
1665: C4 9A     MOV   $9A,A         ($9A = Target Loop Count)
1667: 3F C9 05  CALL  $05C9         (Next Script Byte)
166A: C4 98     MOV   $98,A         ($98 = Jump Address low)
166C: 3F C9 05  CALL  $05C9         (Next Script Byte)
166F: C4 99     MOV   $99,A         ($99 = Jump Address high)
1671: FB 26     MOV   Y,$26+X       (Y = Pointer to Loop Count)
1673: F6 20 F9  MOV   A,$F920+Y     (A = Repeat Counter)
1676: 2E 9A 1B  CBNE  $9A,$1694     (If not same as Target Loop Count then exit)
1679: F6 40 F9  MOV   A,$F940+Y     (A = Loop Counter)
167C: 9C        DEC   A             (Decrement A)
167D: D0 0D     BNE   $168C         (If counting do jump and exit)
167F: 7D        MOV   A,X           (Transfer X to A)
1680: 1C        ASL   A             (Double A)
1681: 9C        DEC   A             (Decrement A)
1682: 9B 26     DEC   $26+X         (Decrement Pointer to Loop Count)
1684: DE 26 05  CBNE  $26+X,$168C   (If A != loop count do jump and exit)
1687: 60        CLRC                (Clear Carry for addition)
1688: 88 04     ADC   A,#$04        (Add 4)
168A: D4 26     MOV   $26+X,A       (Set Pointer to Loop Count)
168C: BA 98     MOVW  YA,$98        (YA = Jump Address)
168E: 7A 00     ADDW  YA,$00        (+ Song Script Offset)
1690: D4 02     MOV   $02+X,A       (Set Current Script Pointer low)
1692: DB 03     MOV   $03+X,Y       (Set Current Script Pointer high)
1694: 6F        RET                 (Return)

; Switch $F5: Jump to yyyy when loop count reaches xx
1695: EB C5     MOV   Y,$C5         (Y = Current Pointer to Loop Count)
1697: F6 20 F9  MOV   A,$F920+Y     (A = Repeat Count)
169A: 8D 00     MOV   Y,#$00        (Zero Y)
169C: 77 90     CMP   A,($90)+Y     (Compare with Target Loop Count)
169E: D0 19     BNE   $16B9         (If not equal then increment script and exit)
16A0: EB C5     MOV   Y,$C5         (Y = Current Pointer to Loop Count)
16A2: F6 40 F9  MOV   A,$F940+Y     (A = Loop Count)
16A5: 9C        DEC   A             (Decrement A)
16A6: D0 0C     BNE   $16B4         (If not zero skip 8 instructions)
16A8: 7D        MOV   A,X           (Transfer X to A)
16A9: 1C        ASL   A             (Double A)
16AA: 9C        DEC   A             (Decrement A)
16AB: 8B C5     DEC   $C5           (Decrement Current Pointer to Loop Count)
16AD: 2E C5 04  CBNE  $C5,$16B4     (If A != Loop Count do jump to yyyy)
16B0: 60        CLRC                (Clear Carry for addition)
16B1: 98 04 C5  ADC   $C5,#$04      (Add 4 to Current Pointer to Loop Count)
16B4: 8D 01     MOV   Y,#$01        (Y = 1)
16B6: 5F 58 16  JMP   $1658         (Switch $F6: Jump to xxxx)
16B9: 3A 90     INCW  $90           (Increment Temporary Script Pointer)
16BB: 3A 90     INCW  $90           (Increment Temporary Script Pointer)
16BD: 3A 90     INCW  $90           (Increment Temporary Script Pointer)
16BF: 6F        RET                 (Return)

; Track Command $E2: Loop Start (loop xx+1 times)
16C0: BB 26     INC   $26+X         (Increment Pointer to Loop Count)
16C2: 7D        MOV   A,X           (Transfer X to A)
16C3: 1C        ASL   A             (Double A)
16C4: 60        CLRC                (Clear Carry for addition)
16C5: 88 04     ADC   A,#$04        (Add 4, next voice)
16C7: DE 26 05  CBNE  $26+X,$16CF   (If A != Loop Count skip 3 instructions)
16CA: 80        SETC                (Set Carry for subtraction)
16CB: A8 04     SBC   A,#$04        (Subtract 4, previous voice)
16CD: D4 26     MOV   $26+X,A       (Set Pointer to Loop Count)
16CF: FB 26     MOV   Y,$26+X       (Y = Pointer to Loop Count)
16D1: E4 A2     MOV   A,$A2         (A = First Parameter, Loop Count)
16D3: F0 01     BEQ   $16D6         (If zero skip 1 instruction)
16D5: BC        INC   A             (Increment A)
16D6: D6 40 F9  MOV   $F940+Y,A     (Set Loop Counter)
16D9: C8 10     CMP   X,#$10        (> #$10)
16DB: B0 05     BCS   $16E2         (If SFX skip 2 instructions)
16DD: E8 01     MOV   A,#$01        (A = 1)
16DF: D6 20 F9  MOV   $F920+Y,A     (Set Repeat Count)
16E2: DD        MOV   A,Y           (Transfer Y to A)
16E3: 1C        ASL   A             (Double A)
16E4: FD        MOV   Y,A           (Transfer A to Y)
16E5: F4 02     MOV   A,$02+X       (A = Current Song Script Pointer low)
16E7: D6 80 F9  MOV   $F980+Y,A     (Set Loop Start Script Pointer low)
16EA: F4 03     MOV   A,$03+X       (A = Current Song Script Pointer high)
16EC: D6 81 F9  MOV   $F981+Y,A     (Set Loop Start Script Pointer high)
16EF: 6F        RET                 (Return)

; Track Command $E3: Loop End
16F0: FB 26     MOV   Y,$26+X       (Pointer to Loop Count)
16F2: C8 10     CMP   X,#$10        (> #$10)
16F4: B0 07     BCS   $16FD         (If so skip 3 instructions)
16F6: F6 20 F9  MOV   A,$F920+Y     (A = Repeat Count)
16F9: BC        INC   A             (Increment Repeat Count)
16FA: D6 20 F9  MOV   $F920+Y,A     (Store Repeat Count)
16FD: F6 40 F9  MOV   A,$F940+Y     (A = Loop Counter)
1700: F0 15     BEQ   $1717         (If zero skip 12 instructions)
1702: 9C        DEC   A             (Decrement Loop Counter)
1703: D0 0F     BNE   $1714         (If not zero skip 9 instructions)
1705: 7D        MOV   A,X           (Transfer X to A)
1706: 1C        ASL   A             (Double A)
1707: 9C        DEC   A             (Decrement A)
1708: 9B 26     DEC   $26+X         (Decrement Pointer to Loop Count) 
170A: DE 26 17  CBNE  $26+X,$1724   (If A != loop count exit)
170D: 60        CLRC                (Clear Carry for addition)
170E: 88 04     ADC   A,#$04        (Add 4)
1710: D4 26     MOV   $26+X,A       (Store Pointer to Loop Count)
1712: 2F 10     BRA   $1724         (Exit) (RET...)
1714: D6 40 F9  MOV   $F940+Y,A     (Store Loop Counter)
1717: DD        MOV   A,Y           (Transfer Y to A)
1718: 1C        ASL   A             (Double A)
1719: FD        MOV   Y,A           (Transfer A to Y)
171A: F6 80 F9  MOV   A,$F980+Y     (A = Loop Start Script Pointer low)
171D: D4 02     MOV   $02+X,A       (Set Song Script Pointer low)
171F: F6 81 F9  MOV   A,$F981+Y     (A = Loop Start Script Pointer high)
1722: D4 03     MOV   $03+X,A       (Set Song Script Pointer high)
1724: 6F        RET                 (Return)

; Switch $E3: Loop End
1725: EB C5     MOV   Y,$C5         (Y = Current Pointer to Loop Count)
1727: F6 40 F9  MOV   A,$F940+Y     (A = Loop Counter)
172A: F0 11     BEQ   $173D         (If zero skip 10 instructions)
172C: 9C        DEC   A             (Decrement A)
172D: D0 0E     BNE   $173D         (If counting skip 8 instructions)
172F: 7D        MOV   A,X           (Transfer X to A)
1730: 1C        ASL   A             (Double A)
1731: 9C        DEC   A             (Decrement A)
1732: 8B C5     DEC   $C5           (Decrement Current Pointer to Loop Count)
1734: 2E C5 13  CBNE  $C5,$174A     (If A != loop count then exit)
1737: 60        CLRC                (Clear Carry for addition)
1738: 98 04 C5  ADC   $C5,#$04      (Add 4 to Current Pointer to Loop Count)
173B: 2F 0D     BRA   $174A         (Exit) (RET...)
173D: DD        MOV   A,Y           (Transfer Y to A)
173E: 1C        ASL   A             (Double A)
173F: FD        MOV   Y,A           (Transfer A to Y)
1740: F6 80 F9  MOV   A,$F980+Y     (A = Loop Start Script Pointer low)
1743: C4 90     MOV   $90,A         (Set Temporary Script Pointer low)
1745: F6 81 F9  MOV   A,$F981+Y     (A = Loop Start Script Pointer high)
1748: C4 91     MOV   $91,A         (Set Temporary Script Pointer high)
174A: 6F        RET                 (Return)

; Track Command $E8: Add to Note Duration
174B: D4 25     MOV   $25+X,A       (Set Note Duration Counter)
174D: 6F        RET                 (Return)

; Track Command $DB: Set Detune
174E: D5 60 F7  MOV   $F760+X,A     (Set Voice Detune)
1751: 6F        RET                 (Return)

; Track Command $F9: Increment Output Code
1752: AB 7B     INC   $7B           (Increment Output Code)
1754: 6F        RET                 (Return)

; Track Command $FA: Clear Output Code
1755: 8F 00 7B  MOV   $7B,#$00      (Zero Output Code)
1758: 6F        RET                 (Return)

; Track Command $FC: Conditional Jump to xxxx
1759: FD        MOV   Y,A           (Transfer A to Y, save Jump Address low)
175A: 3F C9 05  CALL  $05C9         (Next Script Byte)
175D: E4 8F     MOV   A,$8F         (A = Current Voice)
175F: 24 DD     AND   A,$DD         (And Enable Conditional Jump)
1761: F0 0C     BEQ   $176F         (If not exit)
1763: 4E DD 00  TCLR1 $00DD         (Test and clear Enable Conditional Jump)
1766: DD        MOV   A,Y           (Transfer Y to A, Jump Address low)
1767: EB A2     MOV   Y,$A2         (Y = Jump Address high)
1769: 7A 00     ADDW  YA,$00        (Add Song Script Offset)
176B: D4 02     MOV   $02+X,A       (Set Song Script Pointer low)
176D: DB 03     MOV   $03+X,Y       (Set Song Script Pointer high)
176F: 6F        RET                 (Return)

; Track Command $EB: End of Song Script
1770: AE        POP   A              (Restore A)
1771: AE        POP   A              (Restore A)
1772: E4 8F     MOV   A,$8F          (A = Current Voice bitmask)
1774: C8 10     CMP   X,#$10         (> #$10)
1776: B0 05     BCS   $177D          (If so skip 2 instructions)
1778: 4E 52 00  TCLR1 $0052          (Test and clear Enabled Voices)
177B: 2F 09     BRA   $1786          (skip 3 instructions)
177D: 4E 83 00  TCLR1 $0083          (Test and clear Game SFX Voices)
1780: 4E 84 00  TCLR1 $0084          (Test and clear System SFX Voices)
1783: 4E 5D 00  TCLR1 $005D          (Test and clear Active Slur for SFX Voices)
1786: 3F BB 14  CALL  $14BB          (Disable Noise)
1789: 3F F2 14  CALL  $14F2          (Disable Pitch Modulation)
178C: 5F 7D 14  JMP   $147D          (Disable Echo)

; Note Tuning values (Chrono Trigger has exactly the same data at $1D6D)
178F: 79 08     A# - $0879
1791: FA 08     B  - $08FA
1793: 83 09     C  - $0983
1795: 14 0A     C# - $0A14
1797: AD 0A     D  - $0AAD
1799: 50 0B     D# - $0B50
179B: FC 0B     E  - $0BFC
179D: B2 0C     F  - $0CB2
179F: 74 0D     F# - $0D74
17A1: 41 0E     G  - $0E41
17A3: 1A 0F     G# - $0F1A
17A5: 00 10     A  - $1000
17A7: F3 10     A# - $10F3

; Echo filter set 0
17A9: 7F 00 00 00 00 00 00 00

; Echo filter set 1
17B1: 0C 21 2B 2B 13 FE F3 F9

; Echo filter set 2
17B9: 58 BF DB F0 FE 07 0C 0C

; Echo filter set 3
17C1: 34 33 00 D9 E5 01 FC EB

; Echo filter set 4
17C9: 80 80 80 80 7F 7F 7F 7F

; Note duration data (ticks)
17D1: C0	1/1  Whole Note
17D2: 60	1/2  Half Note
17D3: 40	1/3  Half Note Triplet
17D4: 48	3/8  Dotted Quarter Note
17D5: 30	1/4  Quarter Note
17D6: 20	1/6  Quarter Note Triplet  
17D7: 24	3/16 Dotted Eighth Note 
17D8: 18	1/8  Eighth Note
17D9: 10	1/12 Triplet
17DA: 0C	1/16 Sixteenth Note
17DB: 08	1/24 Sixteenth Note Triplet
17DC: 06	1/32 Thirty-second Note
17DD: 04	1/48 Thirty-second Note Tripet
17DE: 03	1/64 Sixty-fourth Note

; Pointers to System Sound Effect Scripts ($20-$2F)
17DF: FF 17     ($17FF) $20 Click
17E1: 0A 18     ($180A) $21 Cursor
17E3: 15 18     ($1815) $22 Buzzer (error)
17E5: 20 18     ($1820) $23 Save (success)
17E7: 32 18     ($1832) $24 Letter Deletion (naming screen)
17E9: 00 00             $25 not used
17EB: 00 00             $26 not used
17ED: 00 00             $27 not used
17EF: 3E 18     ($183E) $28 Ba-ding high (charcter active in battle)
17F1: 57 18     ($1857) $29 Ba-ding low (player 2 active in battle)
17F3: 00 00             $2A not used
17F5: 00 00             $2B not used
17F7: 6F 18     ($186F) $2C Ching
17F9: 00 00             $2D not used
17FB: 00 00             $2E not used
17FD: 00 00             $2F not used

; System Sound Effect $20: Click
17FF: C4 46       ; Set Voice Volume to $46 
1801: DC 05       ; Set Instrument $05
1803: C8 06 0C    ; Change Pitch $0C w/ Envelope $06
1806: D6 06       ; Set Octave to $06
1808: 6C          ;   E  1/24
1809: EB          ; End of Script

; System Sound Effect $21: Cursor
180A: C4 46       ; Set Voice Volume to $46
180C: DC 05       ; Set Instrument 
180E: C8 06 0C    ; Change Pitch $0C w/ Envelope $06
1811: D6 06       ; Set Octave to $06
1813: 96          ;   G  1/24
1814: EB          ; End of Script

; System Sound Effect $22: Buzzer
1815: C4 6E       ; Set Voice Volume to $6E
1817: D6 04       ; Set Octave to $04
1819: DC 06       ; Set Instrument $06 
181B: E2 04       ; Loop Start ($05 times)
181D: 37          ;   C  1/64
181E: E3          ; Loop End
181F: EB          ; End of Script

; System Sound Effect $23: Save
1820: C4 46       ; Set Voice Volume to $46
1822: DC 03       ; Set Instrument $03
1824: DD 0E       ; Set ADSR Attack Value ($0E)
1826: D6 07       ; Set Octave to $07 
1828: E4          ; Enable Slur
1829: 28          ;   B  1/48
182A: 37          ;   C  1/64
182B: 53          ;   D  1/64
182C: 6E          ;   E  1/48
182D: 7C          ;   F  1/48
182E: E0 16       ; Set ADSR Release Value ($16)
1830: 90          ;   G  1/4
1831: EB          ; End of Script

; System Sound Effect $24: Letter Deletion (naming screen)
1832: C4 46       ; Set Voice Volume to $46
1834: DC 07       ; Set Instrument $07
1836: D6 07       ; Set Octave to $07
1838: DD 06       ; Set ADSR Attack Value ($06)
183A: E0 16       ; Set ADSR Release Value ($16)
183C: 6C          ;   E  1/24
183D: EB          ; End of Script

; System Sound Effect $28: Ba-ding high (character becomes active in battle)
183E: C4 6E       ; Set Voice Volume to $6E
1840: C9 00 0C 7F ; Enable Vibrato ($00: delay, $0C: rate, $7F: amplitude)
1844: DC 06       ; Set Instrument 
1846: D6 05       ; Set Octave $05
1848: 88          ;   F# 1/24
1849: D7          ; Octave Up
184A: C4 64       ; Set Voice Volume to $64
184C: 42          ;   C# 1/24
184D: C4 50       ; Set Voice Volume to $50
184F: 42          ;   C# 1/24
1850: C4 3C       ; Set Voice Volume to $3C
1852: 42          ;   C# 1/24
1853: C4 28       ; Set Voice Volume to $28
1845: 42          ;   C# 1/24
1856: EB          ; End of Script

; System Sound Effect $29: Ba-ding low (player 2 becomes active in battle)
1857: C4 6E       ; Set Voice Volume to 
1859: C9 00 0C 7F ; Enable Vibrato ($00: delay, $0C: rate, $7F: amplitude)
185D: DC 06       ; Set Instrument $06
185F: D6 05       ; Set Octave $05
1861: 42          ;   C# 1/24
1862: C4 64       ; Set Voice Volume to $64
1864: A4          ;   G# 1/24
1865: C4 50       ; Set Voice Volume to $50
1867: A4          ;   G# 1/24
1868: C4 3C       ; Set Voice Volume to $3C
186A: A4          ;   G# 1/24
186B: C4 28       ; Set Voice Volume to $28
186D: A4          ;   G# 1/24
186E: EB          ; End of Script

; System Sound Effect $2C: Ching
186F: C4 41       ; Set Voice Volume to $41
1871: DC 05       ; Set Instrument $05 
1873: D6 07       ; Set Octave $07
1875: E0 18       ; Set ADSR Release Value ($18)
1877: 99          ;   G  1/64
1878: CB 00 06 BF ; Enable Tremolo ($00: delay, $06: rate, $BF: amplitude)
187C: E0 12       ; Set ADSR Release Value ($12)
187E: D4          ; Enable Echo
187F: 9D          ;   G# 3/8
1880: EB          ; End of Script

; Jump table for Track Commands
1881: D3 11     ($11D3) $C4 Set Voice Volume to xx (00-7F)
1883: E4 11     ($11E4) $C5 Set Voice Volume w/ Envelope (yy: volume, xx: envelope duration)
1885: 36 12     ($1236) $C6 Set Voice Pan to xx
1887: 46 12     ($1246) $C7 Set Voice Pan w/ Envelope
1889: 66 12     ($1266) $C8 Change Pitch w/ Envelope 
188B: E3 12     ($12E3) $C9 Enable Vibrato
188D: 8C 13     ($138C) $CA Disable Vibrato
188F: 96 13     ($1396) $CB Enable Tremolo
1891: EA 13     ($13EA) $CC Disable Tremolo
1893: F4 13     ($13F4) $CD Enable Pansweep
1895: 4A 14     ($144A) $CE Disable Pansweep
1897: CB 14     ($14CB) $CF Set Noise Clock
1899: 8D 14     ($148D) $D0 Enable Noise
189B: BB 14     ($14BB) $D1 Disable Noise
189D: D9 14     ($14D9) $D2 Enable Pitch Modulation
189F: F2 14     ($14F2) $D3 Disable Pitch Modulation
18A1: 64 14     ($1464) $D4 Enable Echo
18A3: 7D 14     ($147D) $D5 Disable Echo
18A5: 60 14     ($1460) $D6 Set Octave to xx
18A7: 56 14     ($1456) $D7 Increment Octave
18A9: 5C 14     ($145C) $D8 Decrement Octave
18AB: 75 12     ($1275) $D9 Set Transpose
18AD: 71 12     ($1271) $DA Add to Transpose
18AF: 4E 17     ($174E) $DB Set Detune
18B1: 02 15     ($1502) $DC Set Instrument
18B3: 38 15     ($1538) $DD Set ADSR Attack Value (0-15)
18B5: 68 15     ($1568) $DE Set ADSR Decay Value (0-7)
18B7: 7B 15     ($157B) $DF Set ADSR Sustain Value (0-7)
18B9: 8D 15     ($158D) $E0 Set ADSR Release Value (0-31)
18BB: 9D 15     ($159D) $E1 Reset ADSR Default Values
18BD: C0 16     ($16C0) $E2 Loop Start (loop xx+1 times)
18BF: F0 16     ($16F0) $E3 Loop End
18C1: B4 15     ($15B4) $E4 Enable Slur
18C3: D3 0F     ($0FD3) $E5 Disable Slur, handled in switch statement
18C5: DE 15     ($15DE) $E6 Enable Drum Roll
18C7: D3 0F     ($0FD3) $E7 Disable Drum Roll, handled in switch statement
18C9: 4B 17     ($174B) $E8 Add to Note Duration
18CB: 02 16     ($1602) $E9 Play Game Sound Effect (voice A)
18CD: 06 16     ($1606) $EA Play Game Sound Effect (voice B)
18CF: 70 17     ($1770) $EB End of Script
18D1: 70 17     ($1770) $EC Not used
18D3: 70 17     ($1770) $ED Not used
18D5: 70 17     ($1770) $EE Not used
18D7: 70 17     ($1770) $EF Not used
18D9: AF 11     ($11AF) $F0 Set Tempo
18DB: B8 11     ($11B8) $F1 Set Tempo w/ Envelope
18DD: 05 12     ($1205) $F2 Set Song Echo Volume
18DF: 12 12     ($1212) $F3 Set Song Echo Volume w/ Envelope
18E1: D0 11     ($11D0) $F4 Set Song Volume
18E3: 65 16     ($1665) $F5 Jump to yyyy When Loop Count Reaches xx
18E5: 4A 16     ($164A) $F6 Jump to xxxx
18E7: 79 12     ($1279) $F7 Set Echo Feedback to yy over xx frames
18E9: 9B 12     ($129B) $F8 Set Filter ------yy
18EB: 52 17     ($1752) $F9 Increment Output Code
18ED: 55 17     ($1755) $FA Clear Output Code
18EF: B0 15     ($15B0) $FB Ignore Song Volume
18F1: 59 17     ($1759) $FC Conditional Jump to xxxx
18F3: 70 17     ($1770) $FD Not used
18F5: 70 17     ($1770) $FE Not used
18F7: 70 17     ($1770) $FF Not used

; Number of bytes for Track Commands
18F9: 01        $C4 Set Voice Volume to xx
18FA: 02        $C5 Set Voice Volume w/ Envelope
18FB: 01        $C6 Set Voice Pan to xx
18FC: 02        $C7 Set Voice Pan w/ Envelope
18FD: 02        $C8 Change Pitch w/ Envelope
18FE: 03        $C9 Enable Vibrato
18FF: 00        $CA Disable Vibrato
1900: 03        $CB Enable Tremolo
1901: 00        $CC Disable Tremolo
1902: 02        $CD Enable Pansweep
1903: 00        $CE Disable Pansweep
1904: 01        $CF Set Noise Clock (00-1F)
1905: 00        $D0 Enable Noise
1906: 00        $D1 Disable Noise
1907: 00        $D2 Enable Pitch Modulation
1908: 00        $D3 Disable Pitch Modulation
1909: 00        $D4 Enable Echo
190A: 00        $D5 Disable Echo
190B: 01        $D6 Set Octave to xx
190C: 00        $D7 Increment Octave
190D: 00        $D8 Decrement Octave
190E: 01        $D9 Set Transpose
190F: 01        $DA Add to Transpose
1910: 01        $DB Set Detune
1911: 01        $DC Set Instrument
1912: 01        $DD Set ADSR Attack Value (0-15)
1913: 01        $DE Set ADSR Decay Value (0-7)
1914: 01        $DF Set ADSR Sustain Value (0-7)
1915: 01        $E0 Set ADSR Release Value (0-31)
1916: 00        $E1 Reset ADSR Default Values
1917: 01        $E2 Loop Start (loop xx+1 times)
1918: 00        $E3 Loop End
1919: 00        $E4 Enable Slur
191A: 00        $E5 Disable Slur
191B: 00        $E6 Enable Drum Roll
191C: 00        $E7 Disable Drum Roll
191D: 01        $E8 Add to Note Duration
191E: 01        $E9 Play Game Sound Effect (voice A)
191F: 01        $EA Play Game Sound Effect (voice B)
1920: 00        $EB End of Script
1921: 00        $EC Not used
1922: 00        $ED Not used
1923: 00        $EE Not used
1924: 00        $EF Not used
1925: 01        $F0 Set Tempo
1926: 02        $F1 Set Tempo w/ Envelope
1927: 01        $F2 Set Song Echo Volume
1928: 02        $F3 Set Song Echo Volume w/ Envelope
1929: 01        $F4 Set Song Volume
192A: 03        $F5 Jump to yyyy When Loop Count Reaches xx
192B: 02        $F6 Jump to xxxx
192C: 02        $F7 Set Echo Feedback to yy over xx frames
192D: 02        $F8 Set Filter ------yy
192E: 00        $F9 Increment Output Code
192F: 00        $FA Clear Output Code
1930: 00        $FB Ignore Song Volume
1931: 02        $FC Conditional Jump
1932: 00        $FD Not used
1933: 00        $FE Not used
1934: 00        $FF Not used

Jump Table for Interrupts $10-$1F
1935: 1E 0A     ($0A1E) ; $10 Load New Song (x: song number, y: master volume)
1937: 26 0A     ($0A26) ; $11 Load New Song from Alternative Start
1939: D3 0F     ($0FD3) ; $12 Not used (return)
193B: D3 0F     ($0FD3) ; $13 Not used (return)
193D: 1B 0A     ($0A1B) ; $14 Pause and Load New Song
193F: 23 0A     ($0A23) ; $15 Pause and Load New Song from Alternative Start
1941: D3 0F     ($0FD3) ; $16 Not used (return)
1943: D3 0F     ($0FD3) ; $17 Not used (return)
1945: 3D 0B     ($0B3D) ; $18 Game Sound Effect
1947: D3 0F     ($0FD3) ; $19 Not used (return)
1949: D3 0F     ($0FD3) ; $1A Not used (return)
194B: D3 0F     ($0FD3) ; $1B Not used (return)
194D: D3 0F     ($0FD3) ; $1C Not used (return)
194F: D3 0F     ($0FD3) ; $1D Not used (return)
1951: D3 0F     ($0FD3) ; $1E Not used (return)
1953: D3 0F     ($0FD3) ; $1F Not used (return)

Jump Table for Interrupts $80-$8F
1955: 6A 0C     ($0C6A) ; $80 Set master/sound effect volume to yy (w/ envelope xx)
1957: 6A 0C     ($0C6A) ; $81 Set master volume to yy (w/ envelope xx)
1959: 6A 0C     ($0C6A) ; $82 Set sound effect volume to yy (w/ envelope xx)
195B: E5 0C     ($0CE5) ; $83 Set sound effect pan to yy (w/ envelope xx)
195D: 09 0D     ($0D09) ; $84 Set Tempo Ratio (yy = envelope duration, xx = tempo ratio, signed fraction)
195F: 35 0D     ($0D35) ; $85 Change Pitch
1961: D3 0F     ($0FD3) ; $86 Not used (return)
1963: D3 0F     ($0FD3) ; $87 Not used (return)
1965: D3 0F     ($0FD3) ; $88 Not used (return)
1967: 9C 0F     ($0F9C) ; $89 Enable Conditional Jump (used by Phantom Train and Dancing Mad)
1969: D3 0F     ($0FD3) ; $8A Not used (return)
196B: D3 0F     ($0FD3) ; $8B Not used (return)
196D: D3 0F     ($0FD3) ; $8C Not used (return)
196F: D3 0F     ($0FD3) ; $8D Not used (return)
1971: D3 0F     ($0FD3) ; $8E Not used (return)
1973: D3 0F     ($0FD3) ; $8F Not used (return)

Jump Table for Interrupts $F0-$FF
1975: 6F 0D     ($0D6F) ; $F0 Stop song & sound effect
1977: 6F 0D     ($0D6F) ; $F1 Stop song
1979: 6F 0D     ($0D6F) ; $F2 Stop sound effect
197B: 61 0D     ($0D61) ; $F3 Enable/Disable Mono Mode
197D: C3 0D     ($0DC3) ; $F4 Mute Voices (x: voices to mute, bitmask)
197F: CA 0D     ($0DCA) ; $F5 Pause/Unpause music (0 = unpause, 1 = pause)
1981: 83 0F     ($0F83) ; $F6 Enable/Disable Fast Forward (0 = disable, 1 = enable)
1983: D3 0F     ($0FD3) ; $F7 Not used (return)
1985: D3 0F     ($0FD3) ; $F8 Not used (return)
1987: D3 0F     ($0FD3) ; $F9 Not used (return)
1989: D3 0F     ($0FD3) ; $FA Not used (return)
198B: D3 0F     ($0FD3) ; $FB Not used (return)
198D: 02 10     ($1002) ; $FC Set Echo Delay to xx
198F: E8 0F     ($0FE8) ; $FD Set DSP Register xx with data yy
1991: 38 0E     ($0E38) ; $FE Transfer Data from SCPU
1993: A3 0F     ($0FA3) ; $FF Reset Codes

; Register list (initial)
1995: 4C        (01: Key-on voices)
1996: 2D        (02: Pitch modulation enabled voices)
1997: 3D        (03: Noise enabled voices)
1998: 6C        (04: Flags)
1999: 5C        (05: Muted voices)
199A: 4D        (06: Echo enable)
199B: 2C        (07: Echo volume left)
199C: 3C        (08: Echo volume right)
199D: 0D        (09: Echo feedback)
199E: 0F        (0A: C0 echo filter)
199F: 1F        (0B: C1 echo filter)
19A0: 2F        (0C: C2 echo filter)
19A1: 3F        (0D: C3 echo filter)
19A2: 4F        (0E: C4 echo filter)
19A3: 5F        (0F: C5 echo filter)
19A4: 6F        (10: C6 echo filter)
19A5: 7F        (11: C7 echo filter)

; Variables whose contents are stored in the registers listed above (initial)
19A6: 22        (01: Key-on voices)
19A7: 89        (02: Pitch modulation enabled voices)
19A8: 88        (03: Noise enabled voices)
19A9: 8A        (04: Flags)
19AA: 24        (05: Muted voices)
19AB: 87        (06: Echo enable)
19AC: 4D        (07: Echo volume left)
19AD: 4D        (08: Echo volume right)
19AE: 76        (09: Echo feedback)
19AF: 66        (0A: C0 echo filter)
19B0: 68        (0B: C1 echo filter)
19B1: 6A        (0C: C2 echo filter)
19B2: 6C        (0D: C3 echo filter)
19B3: 6E        (0E: C4 echo filter)
19B4: 70        (0F: C5 echo filter)
19B5: 72        (10: C6 echo filter)
19B6: 74        (11: C7 echo filter)
